var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressControl = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ProgressControl/ProgressControl.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var TRACK_HEIGHT = 3;
var THUMB_WIDTH = 8;
var ProgressControlThumb = function ProgressControlThumb() {
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme$color = _useTheme.theme.colors,
    black = _useTheme$theme$color.black,
    grey_dark = _useTheme$theme$color.grey_dark,
    static_white = _useTheme$theme$color.static_white;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    hitSlop: {
      bottom: 20,
      left: 20,
      right: 20,
      top: 20
    },
    style: [styles.progressControlThumbStyle, {
      backgroundColor: static_white,
      borderColor: grey_dark,
      shadowColor: black
    }]
  });
};
var ProgressControl = exports.ProgressControl = function ProgressControl(props) {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    widthInNumbers = _useState2[0],
    setWidthInNumbers = _useState2[1];
  var filledColorFromProp = props.filledColor,
    onEndDrag = props.onEndDrag,
    onPlayPause = props.onPlayPause,
    onProgressDrag = props.onProgressDrag,
    onStartDrag = props.onStartDrag,
    progress = props.progress,
    testID = props.testID;
  var progressValue = (0, _reactNativeReanimated.useSharedValue)(progress);
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    grey_dark = _useTheme2$theme.colors.grey_dark,
    _useTheme2$theme$prog = _useTheme2$theme.progressControl,
    container = _useTheme2$theme$prog.container,
    filledColorFromTheme = _useTheme2$theme$prog.filledColor,
    filledStyles = _useTheme2$theme$prog.filledStyles,
    thumb = _useTheme2$theme$prog.thumb;
  var pan = _reactNativeGestureHandler.Gesture.Pan().maxPointers(1).onStart(function (event) {
    var currentProgress = (progressValue.value + event.x) / widthInNumbers;
    progressValue.value = Math.max(0, Math.min(currentProgress, 1));
    if (onStartDrag) {
      (0, _reactNativeReanimated.runOnJS)(onStartDrag)(progressValue.value);
    }
    if (onPlayPause) {
      (0, _reactNativeReanimated.runOnJS)(onPlayPause)(true);
    }
  }).onUpdate(function (event) {
    var currentProgress = (progressValue.value + event.x) / widthInNumbers;
    progressValue.value = Math.max(0, Math.min(currentProgress, 1));
    if (onProgressDrag) {
      (0, _reactNativeReanimated.runOnJS)(onProgressDrag)(progressValue.value);
    }
  }).onEnd(function (event) {
    var currentProgress = (progressValue.value + event.x) / widthInNumbers;
    progressValue.value = Math.max(0, Math.min(currentProgress, 1));
    if (onEndDrag) {
      (0, _reactNativeReanimated.runOnJS)(onEndDrag)(progressValue.value);
    }
    if (onPlayPause) {
      (0, _reactNativeReanimated.runOnJS)(onPlayPause)(false);
    }
  }).withTestId(testID);
  var filledColor = filledColorFromProp || filledColorFromTheme;
  var thumbStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        translateX: progress * widthInNumbers - THUMB_WIDTH / 2
      }]
    };
  }, [progress]);
  var animatedFilledStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      width: progress * widthInNumbers
    };
  }, [progress]);
  return (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
    gesture: pan,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      onLayout: function onLayout(_ref) {
        var nativeEvent = _ref.nativeEvent;
        setWidthInNumbers(nativeEvent.layout.width);
      },
      style: [styles.container, {
        backgroundColor: grey_dark
      }, container],
      children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated["default"].View, {
        style: [styles.filledStyle, animatedFilledStyles, {
          backgroundColor: filledColor
        }, filledStyles]
      }), (0, _jsxRuntime.jsx)(_reactNativeReanimated["default"].View, {
        style: [thumbStyles, thumb],
        children: onEndDrag || onProgressDrag ? (0, _jsxRuntime.jsx)(ProgressControlThumb, {}) : null
      })]
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 2,
    height: TRACK_HEIGHT
  },
  filledStyle: {
    borderRadius: 2,
    height: TRACK_HEIGHT
  },
  progressControlThumbStyle: {
    borderRadius: 5,
    borderWidth: 0.2,
    elevation: 6,
    height: 30,
    shadowOffset: {
      height: 3,
      width: 0
    },
    shadowOpacity: 0.27,
    shadowRadius: 4.65,
    top: -15,
    width: THUMB_WIDTH
  }
});
ProgressControl.displayName = 'ProgressControl';
//# sourceMappingURL=ProgressControl.js.map