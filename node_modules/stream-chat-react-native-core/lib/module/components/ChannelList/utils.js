var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moveChannelUp = exports.getChannel = exports.MAX_QUERY_CHANNELS_LIMIT = exports.DEFAULT_QUERY_CHANNELS_LIMIT = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _utils = require("./hooks/utils");
var moveChannelUp = exports.moveChannelUp = function moveChannelUp(_ref) {
  var channels = _ref.channels,
    channelToMove = _ref.channelToMove,
    channelToMoveIndexWithinChannels = _ref.channelToMoveIndexWithinChannels,
    sort = _ref.sort;
  var targetChannelIndex = channelToMoveIndexWithinChannels != null ? channelToMoveIndexWithinChannels : channels.findIndex(function (channel) {
    return channel.cid === channelToMove.cid;
  });
  var targetChannelExistsWithinList = targetChannelIndex >= 0;
  var targetChannelAlreadyAtTheTop = targetChannelIndex === 0;
  var considerPinnedChannels = (0, _utils.shouldConsiderPinnedChannels)(sort);
  if (targetChannelAlreadyAtTheTop) {
    return channels;
  }
  var newChannels = (0, _toConsumableArray2["default"])(channels);
  if (targetChannelExistsWithinList) {
    newChannels.splice(targetChannelIndex, 1);
  }
  var lastPinnedChannelIndex = null;
  if (considerPinnedChannels) {
    lastPinnedChannelIndex = (0, _utils.findLastPinnedChannelIndex)({
      channels: newChannels
    });
  }
  newChannels.splice(typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);
  return newChannels;
};
var getChannel = exports.getChannel = function () {
  var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref2) {
    var client, id, type, channel;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          client = _ref2.client, id = _ref2.id, type = _ref2.type;
          channel = client.channel(type, id);
          _context.next = 4;
          return channel.watch();
        case 4:
          return _context.abrupt("return", channel);
        case 5:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getChannel(_x) {
    return _ref3.apply(this, arguments);
  };
}();
var DEFAULT_QUERY_CHANNELS_LIMIT = exports.DEFAULT_QUERY_CHANNELS_LIMIT = 10;
var MAX_QUERY_CHANNELS_LIMIT = exports.MAX_QUERY_CHANNELS_LIMIT = 30;
//# sourceMappingURL=utils.js.map