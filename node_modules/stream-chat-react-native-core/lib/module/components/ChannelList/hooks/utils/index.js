var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractSortValue = void 0;
exports.findLastPinnedChannelIndex = findLastPinnedChannelIndex;
exports.findPinnedAtSortOrder = findPinnedAtSortOrder;
exports.shouldConsiderPinnedChannels = exports.shouldConsiderArchivedChannels = exports.isChannelPinned = exports.isChannelArchived = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var isChannelPinned = exports.isChannelPinned = function isChannelPinned(channel) {
  if (!channel) {
    return false;
  }
  var member = channel.state.membership;
  return !!(member != null && member.pinned_at);
};
var isChannelArchived = exports.isChannelArchived = function isChannelArchived(channel) {
  if (!channel) {
    return false;
  }
  var member = channel.state.membership;
  return !!(member != null && member.archived_at);
};
var shouldConsiderArchivedChannels = exports.shouldConsiderArchivedChannels = function shouldConsiderArchivedChannels(filters) {
  if (!filters) {
    return false;
  }
  return typeof filters.archived === 'boolean';
};
var extractSortValue = exports.extractSortValue = function extractSortValue(_ref) {
  var _option$targetKey, _option;
  var atIndex = _ref.atIndex,
    sort = _ref.sort,
    targetKey = _ref.targetKey;
  if (!sort) {
    return null;
  }
  var option = null;
  if (Array.isArray(sort)) {
    var _sort$atIndex;
    option = (_sort$atIndex = sort[atIndex]) != null ? _sort$atIndex : null;
  } else {
    var index = 0;
    for (var key in sort) {
      if (index !== atIndex) {
        index++;
        continue;
      }
      if (key !== targetKey) {
        return null;
      }
      option = sort;
      break;
    }
  }
  return (_option$targetKey = (_option = option) == null ? void 0 : _option[targetKey]) != null ? _option$targetKey : null;
};
var shouldConsiderPinnedChannels = exports.shouldConsiderPinnedChannels = function shouldConsiderPinnedChannels(sort) {
  var value = extractSortValue({
    atIndex: 0,
    sort: sort,
    targetKey: 'pinned_at'
  });
  if (typeof value !== 'number') {
    return false;
  }
  return Math.abs(value) === 1;
};
function findPinnedAtSortOrder(_ref2) {
  var sort = _ref2.sort;
  if (!sort) {
    return null;
  }
  if (Array.isArray(sort)) {
    var _sort = (0, _slicedToArray2["default"])(sort, 1),
      option = _sort[0];
    if (!(option != null && option.pinned_at)) {
      return null;
    }
    return option.pinned_at;
  } else {
    if (!sort.pinned_at) {
      return null;
    }
    return sort.pinned_at;
  }
}
function findLastPinnedChannelIndex(_ref3) {
  var channels = _ref3.channels;
  var lastPinnedChannelIndex = null;
  var _iterator = _createForOfIteratorHelper(channels),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      if (!isChannelPinned(channel)) {
        break;
      }
      if (typeof lastPinnedChannelIndex === 'number') {
        lastPinnedChannelIndex++;
      } else {
        lastPinnedChannelIndex = 0;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return lastPinnedChannelIndex;
}
//# sourceMappingURL=index.js.map