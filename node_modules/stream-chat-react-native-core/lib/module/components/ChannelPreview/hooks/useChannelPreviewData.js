var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChannelPreviewData = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _useIsChannelMuted2 = require("./useIsChannelMuted");
var _useLatestMessagePreview = require("./useLatestMessagePreview");
var _contexts = require("../../../contexts");
var useChannelPreviewData = exports.useChannelPreviewData = function useChannelPreviewData(channel, client, forceUpdateOverride) {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    forceUpdate = _useState2[0],
    setForceUpdate = _useState2[1];
  var _useState3 = (0, _react.useState)(channel.state.messages[channel.state.messages.length - 1]),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    lastMessage = _useState4[0],
    setLastMessage = _useState4[1];
  var _useState5 = (0, _react.useState)(channel.countUnread()),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    unread = _useState6[0],
    setUnread = _useState6[1];
  var _useIsChannelMuted = (0, _useIsChannelMuted2.useIsChannelMuted)(channel),
    muted = _useIsChannelMuted.muted;
  var _useChannelsContext = (0, _contexts.useChannelsContext)(),
    contextForceUpdate = _useChannelsContext.forceUpdate;
  var channelListForceUpdate = forceUpdateOverride != null ? forceUpdateOverride : contextForceUpdate;
  var channelLastMessage = channel.lastMessage();
  var channelLastMessageString = "".concat(channelLastMessage == null ? void 0 : channelLastMessage.id).concat(channelLastMessage == null ? void 0 : channelLastMessage.updated_at);
  (0, _react.useEffect)(function () {
    var _client$on = client.on('notification.mark_read', function () {
        setUnread(channel.countUnread());
      }),
      unsubscribe = _client$on.unsubscribe;
    return unsubscribe;
  }, [channel, client]);
  (0, _react.useEffect)(function () {
    if (channelLastMessage && (channelLastMessage.id !== (lastMessage == null ? void 0 : lastMessage.id) || channelLastMessage.updated_at !== (lastMessage == null ? void 0 : lastMessage.updated_at))) {
      setLastMessage(channelLastMessage);
    }
    var newUnreadCount = channel.countUnread();
    setUnread(newUnreadCount);
  }, [channel, channelLastMessage, channelLastMessageString, channelListForceUpdate, lastMessage]);
  (0, _react.useEffect)(function () {
    var handleReadEvent = function handleReadEvent(event) {
      var _event$user, _event$user2;
      if (!event.cid) {
        return;
      }
      if (channel.cid !== event.cid) {
        return;
      }
      if ((event == null || (_event$user = event.user) == null ? void 0 : _event$user.id) === client.userID) {
        setUnread(0);
      } else if (event != null && (_event$user2 = event.user) != null && _event$user2.id) {
        setForceUpdate(function (prev) {
          return prev + 1;
        });
      }
    };
    var _client$on2 = client.on('message.read', handleReadEvent),
      unsubscribe = _client$on2.unsubscribe;
    return unsubscribe;
  }, [client, channel]);
  (0, _react.useEffect)(function () {
    var handleUnreadEvent = function handleUnreadEvent(event) {
      var _event$user3, _client$user;
      if (!event.cid) {
        return;
      }
      if (channel.cid !== event.cid) {
        return;
      }
      if (((_event$user3 = event.user) == null ? void 0 : _event$user3.id) !== ((_client$user = client.user) == null ? void 0 : _client$user.id)) {
        return;
      }
      setUnread(channel.countUnread());
    };
    var _client$on3 = client.on('notification.mark_unread', handleUnreadEvent),
      unsubscribe = _client$on3.unsubscribe;
    return unsubscribe;
  }, [client, channel]);
  var refreshUnreadCount = (0, _react.useMemo)(function () {
    return (0, _throttle["default"])(function () {
      if (muted) {
        setUnread(0);
      } else {
        setUnread(channel.countUnread());
      }
    }, 400);
  }, [channel, muted]);
  (0, _react.useEffect)(function () {
    refreshUnreadCount();
    var handleEvent = function handleEvent() {
      setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);
      refreshUnreadCount();
    };
    var handleNewMessageEvent = function handleNewMessageEvent(event) {
      var message = event.message;
      if (message && (!message.parent_id || message.show_in_channel)) {
        setLastMessage(message);
        setUnread(channel.countUnread());
      }
    };
    var handleUpdatedOrDeletedMessage = function handleUpdatedOrDeletedMessage(event) {
      setLastMessage(function (prevLastMessage) {
        var _event$message;
        if ((prevLastMessage == null ? void 0 : prevLastMessage.id) === ((_event$message = event.message) == null ? void 0 : _event$message.id)) {
          return event.message;
        }
        return prevLastMessage;
      });
    };
    var listeners = [channel.on('message.new', handleNewMessageEvent), channel.on('message.updated', handleUpdatedOrDeletedMessage), channel.on('message.deleted', handleUpdatedOrDeletedMessage), channel.on('message.undeleted', handleEvent), channel.on('channel.truncated', handleEvent)];
    return function () {
      return listeners.forEach(function (l) {
        return l.unsubscribe();
      });
    };
  }, [channel, refreshUnreadCount, forceUpdate, channelListForceUpdate]);
  var latestMessagePreview = (0, _useLatestMessagePreview.useLatestMessagePreview)(channel, forceUpdate, lastMessage);
  return {
    latestMessagePreview: latestMessagePreview,
    muted: muted,
    unread: unread
  };
};
//# sourceMappingURL=useChannelPreviewData.js.map