var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageFooter = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _MessageContext = require("../../../contexts/messageContext/MessageContext");
var _MessagesContext = require("../../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../../contexts/translationContext/TranslationContext");
var _icons = require("../../../icons");
var _utils = require("../../../utils/utils");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Message/MessageSimple/MessageFooter.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var OnlyVisibleToYouComponent = function OnlyVisibleToYouComponent(_ref) {
  var alignment = _ref.alignment;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    grey_dark = _useTheme$theme.colors.grey_dark,
    _useTheme$theme$messa = _useTheme$theme.messageSimple.content,
    deletedMetaText = _useTheme$theme$messa.deletedMetaText,
    eyeIcon = _useTheme$theme$messa.eyeIcon,
    metaText = _useTheme$theme$messa.metaText;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_icons.Eye, Object.assign({
      pathFill: grey_dark
    }, eyeIcon)), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [{
        color: grey_dark,
        textAlign: alignment
      }, metaText, deletedMetaText],
      testID: "only-visible-to-you",
      children: t('Only visible to you')
    })]
  });
};
var MessageFooterWithContext = function MessageFooterWithContext(props) {
  var _message$user;
  var alignment = props.alignment,
    date = props.date,
    deletedMessagesVisibilityType = props.deletedMessagesVisibilityType,
    formattedDate = props.formattedDate,
    isDeleted = props.isDeleted,
    isEditedMessageOpen = props.isEditedMessageOpen,
    isMessageAIGenerated = props.isMessageAIGenerated,
    lastGroupMessage = props.lastGroupMessage,
    members = props.members,
    message = props.message,
    MessageEditedTimestamp = props.MessageEditedTimestamp,
    MessageStatus = props.MessageStatus,
    MessageTimestamp = props.MessageTimestamp,
    otherAttachments = props.otherAttachments,
    showMessageStatus = props.showMessageStatus;
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    grey = _useTheme2$theme.colors.grey,
    _useTheme2$theme$mess = _useTheme2$theme.messageSimple.content,
    editedLabel = _useTheme2$theme$mess.editedLabel,
    messageUser = _useTheme2$theme$mess.messageUser,
    metaContainer = _useTheme2$theme$mess.metaContainer,
    metaText = _useTheme2$theme$mess.metaText;
  var _useTranslationContex2 = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex2.t;
  var isAIGenerated = (0, _react.useMemo)(function () {
    return isMessageAIGenerated(message);
  }, [message, isMessageAIGenerated]);
  if (isDeleted) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, metaContainer],
      children: [deletedMessagesVisibilityType === 'sender' && (0, _jsxRuntime.jsx)(OnlyVisibleToYouComponent, {
        alignment: alignment
      }), (0, _jsxRuntime.jsx)(MessageTimestamp, {
        formattedDate: formattedDate,
        timestamp: date
      })]
    });
  }
  if (lastGroupMessage === false && message.status === _utils.MessageStatusTypes.RECEIVED) {
    return null;
  }
  var isEdited = (0, _utils.isEditedMessage)(message) && !isAIGenerated;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, metaContainer],
      testID: "message-status-time",
      children: [otherAttachments.length && otherAttachments[0].actions ? (0, _jsxRuntime.jsx)(OnlyVisibleToYouComponent, {
        alignment: alignment
      }) : null, Object.keys(members).length > 2 && alignment === 'left' && (_message$user = message.user) != null && _message$user.name ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.text, {
          color: grey
        }, messageUser],
        children: message.user.name
      }) : null, showMessageStatus && (0, _jsxRuntime.jsx)(MessageStatus, {}), (0, _jsxRuntime.jsx)(MessageTimestamp, {
        formattedDate: formattedDate,
        timestamp: date
      }), isEdited && !isEditedMessageOpen ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.dotText, {
            color: grey,
            textAlign: alignment
          }, metaText],
          children: "\u2981"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: grey,
            textAlign: alignment
          }, editedLabel],
          children: t('Edited')
        })]
      }) : null]
    }), isEdited && isEditedMessageOpen ? (0, _jsxRuntime.jsx)(MessageEditedTimestamp, {
      message: message,
      MessageTimestamp: MessageTimestamp
    }) : null]
  });
};
var areEqual = function areEqual(prevProps, nextProps) {
  var _prevOtherAttachments, _nextOtherAttachments;
  var prevAlignment = prevProps.alignment,
    prevDate = prevProps.date,
    prevFormattedDate = prevProps.formattedDate,
    prevIsEditedMessageOpen = prevProps.isEditedMessageOpen,
    prevLastGroupMessage = prevProps.lastGroupMessage,
    prevMembers = prevProps.members,
    prevMessage = prevProps.message,
    prevOtherAttachments = prevProps.otherAttachments,
    prevShowMessageStatus = prevProps.showMessageStatus;
  var nextAlignment = nextProps.alignment,
    nextDate = nextProps.date,
    nextFormattedDate = nextProps.formattedDate,
    nextIsEditedMessageOpen = nextProps.isEditedMessageOpen,
    nextLastGroupMessage = nextProps.lastGroupMessage,
    nextMembers = nextProps.members,
    nextMessage = nextProps.message,
    nextOtherAttachments = nextProps.otherAttachments,
    nextShowMessageStatus = nextProps.showMessageStatus;
  var alignmentEqual = prevAlignment === nextAlignment;
  if (!alignmentEqual) {
    return false;
  }
  var isEditedMessageOpenEqual = prevIsEditedMessageOpen === nextIsEditedMessageOpen;
  if (!isEditedMessageOpenEqual) {
    return false;
  }
  var membersEqual = Object.keys(prevMembers).length === Object.keys(nextMembers).length;
  if (!membersEqual) {
    return false;
  }
  var lastGroupMessageEqual = prevLastGroupMessage === nextLastGroupMessage;
  if (!lastGroupMessageEqual) {
    return false;
  }
  var deletedMessagesVisibilityTypeEqual = prevProps.deletedMessagesVisibilityType === nextProps.deletedMessagesVisibilityType;
  if (!deletedMessagesVisibilityTypeEqual) {
    return false;
  }
  var isPrevMessageTypeDeleted = prevMessage.type === 'deleted';
  var isNextMessageTypeDeleted = nextMessage.type === 'deleted';
  var messageEqual = isPrevMessageTypeDeleted === isNextMessageTypeDeleted && prevMessage.reply_count === nextMessage.reply_count && prevMessage.status === nextMessage.status && prevMessage.type === nextMessage.type && prevMessage.text === nextMessage.text && prevMessage.pinned === nextMessage.pinned;
  if (!messageEqual) {
    return false;
  }
  var otherAttachmentsEqual = prevOtherAttachments.length === nextOtherAttachments.length && (prevOtherAttachments == null || (_prevOtherAttachments = prevOtherAttachments[0]) == null || (_prevOtherAttachments = _prevOtherAttachments.actions) == null ? void 0 : _prevOtherAttachments.length) === (nextOtherAttachments == null || (_nextOtherAttachments = nextOtherAttachments[0]) == null || (_nextOtherAttachments = _nextOtherAttachments.actions) == null ? void 0 : _nextOtherAttachments.length);
  if (!otherAttachmentsEqual) {
    return false;
  }
  var showMessageStatusEqual = prevShowMessageStatus === nextShowMessageStatus;
  if (!showMessageStatusEqual) {
    return false;
  }
  var dateEqual = prevDate === nextDate;
  if (!dateEqual) {
    return false;
  }
  var formattedDateEqual = prevFormattedDate === nextFormattedDate;
  if (!formattedDateEqual) {
    return false;
  }
  return true;
};
var MemoizedMessageFooter = _react["default"].memo(MessageFooterWithContext, areEqual);
var MessageFooter = exports.MessageFooter = function MessageFooter(props) {
  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
    alignment = _useMessageContext.alignment,
    isEditedMessageOpen = _useMessageContext.isEditedMessageOpen,
    isMessageAIGenerated = _useMessageContext.isMessageAIGenerated,
    lastGroupMessage = _useMessageContext.lastGroupMessage,
    members = _useMessageContext.members,
    message = _useMessageContext.message,
    otherAttachments = _useMessageContext.otherAttachments,
    showMessageStatus = _useMessageContext.showMessageStatus;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    deletedMessagesVisibilityType = _useMessagesContext.deletedMessagesVisibilityType,
    MessageEditedTimestamp = _useMessagesContext.MessageEditedTimestamp,
    MessageStatus = _useMessagesContext.MessageStatus,
    MessageTimestamp = _useMessagesContext.MessageTimestamp;
  return (0, _jsxRuntime.jsx)(MemoizedMessageFooter, Object.assign({
    alignment: alignment,
    deletedMessagesVisibilityType: deletedMessagesVisibilityType,
    isEditedMessageOpen: isEditedMessageOpen,
    isMessageAIGenerated: isMessageAIGenerated,
    lastGroupMessage: lastGroupMessage,
    members: members,
    message: message,
    MessageEditedTimestamp: MessageEditedTimestamp,
    MessageStatus: MessageStatus,
    MessageTimestamp: MessageTimestamp,
    otherAttachments: otherAttachments,
    showMessageStatus: showMessageStatus
  }, props));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 4
  },
  dotText: {
    paddingHorizontal: 4
  },
  text: {
    fontSize: 12
  }
});
//# sourceMappingURL=MessageFooter.js.map