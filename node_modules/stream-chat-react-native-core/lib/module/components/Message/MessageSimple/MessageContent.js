var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageContent = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _MessageTextContainer = require("./MessageTextContainer");
var _contexts = require("../../../contexts");
var _MessageContext = require("../../../contexts/messageContext/MessageContext");
var _MessagesContext = require("../../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../../contexts/translationContext/TranslationContext");
var _useViewport2 = require("../../../hooks/useViewport");
var _Poll = require("../../Poll/Poll");
var _useMessageData2 = require("../hooks/useMessageData");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["borderBottomLeftRadius", "borderBottomRightRadius", "borderRadius", "borderRadiusL", "borderRadiusS", "borderTopLeftRadius", "borderTopRightRadius"];
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Message/MessageSimple/MessageContent.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var styles = _reactNative.StyleSheet.create({
  container: {
    flexShrink: 1
  },
  containerInner: {
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    borderWidth: 1,
    overflow: 'hidden'
  },
  leftAlignContent: {
    justifyContent: 'flex-start'
  },
  leftAlignItems: {
    alignItems: 'flex-start'
  },
  replyBorder: {
    borderLeftWidth: 1,
    bottom: 0,
    position: 'absolute'
  },
  replyContainer: {
    flexDirection: 'row',
    paddingHorizontal: 8,
    paddingTop: 8
  },
  rightAlignContent: {
    justifyContent: 'flex-end'
  },
  rightAlignItems: {
    alignItems: 'flex-end'
  }
});
var MessageContentWithContext = function MessageContentWithContext(props) {
  var additionalPressableProps = props.additionalPressableProps,
    alignment = props.alignment,
    Attachment = props.Attachment,
    backgroundColor = props.backgroundColor,
    enableMessageGroupingByUser = props.enableMessageGroupingByUser,
    FileAttachmentGroup = props.FileAttachmentGroup,
    Gallery = props.Gallery,
    groupStyles = props.groupStyles,
    isMessageAIGenerated = props.isMessageAIGenerated,
    isMyMessage = props.isMyMessage,
    isVeryLastMessage = props.isVeryLastMessage,
    message = props.message,
    messageContentOrder = props.messageContentOrder,
    _props$messageGrouped = props.messageGroupedSingleOrBottom,
    messageGroupedSingleOrBottom = _props$messageGrouped === void 0 ? false : _props$messageGrouped,
    MessageError = props.MessageError,
    noBorder = props.noBorder,
    _onLongPress = props.onLongPress,
    _onPress = props.onPress,
    _onPressIn = props.onPressIn,
    otherAttachments = props.otherAttachments,
    preventPress = props.preventPress,
    Reply = props.Reply,
    setMessageContentWidth = props.setMessageContentWidth,
    StreamingMessageView = props.StreamingMessageView,
    threadList = props.threadList;
  var _useChatContext = (0, _contexts.useChatContext)(),
    client = _useChatContext.client;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    PollContentOverride = _useMessagesContext.PollContent;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    grey_whisper = _useTheme$theme$color.grey_whisper,
    light_gray = _useTheme$theme$color.light_gray,
    _useTheme$theme$messa = _useTheme$theme.messageSimple.content,
    _useTheme$theme$messa2 = _useTheme$theme$messa.container,
    borderBottomLeftRadius = _useTheme$theme$messa2.borderBottomLeftRadius,
    borderBottomRightRadius = _useTheme$theme$messa2.borderBottomRightRadius,
    borderRadius = _useTheme$theme$messa2.borderRadius,
    borderRadiusL = _useTheme$theme$messa2.borderRadiusL,
    borderRadiusS = _useTheme$theme$messa2.borderRadiusS,
    borderTopLeftRadius = _useTheme$theme$messa2.borderTopLeftRadius,
    borderTopRightRadius = _useTheme$theme$messa2.borderTopRightRadius,
    container = (0, _objectWithoutProperties2["default"])(_useTheme$theme$messa2, _excluded),
    containerInner = _useTheme$theme$messa.containerInner,
    lastMessageContainer = _useTheme$theme$messa.lastMessageContainer,
    messageGroupedSingleOrBottomContainer = _useTheme$theme$messa.messageGroupedSingleOrBottomContainer,
    messageGroupedTopContainer = _useTheme$theme$messa.messageGroupedTopContainer,
    replyBorder = _useTheme$theme$messa.replyBorder,
    replyContainer = _useTheme$theme$messa.replyContainer,
    wrapper = _useTheme$theme$messa.wrapper;
  var _useViewport = (0, _useViewport2.useViewport)(),
    vw = _useViewport.vw;
  var onLayout = function onLayout(_ref) {
    var width = _ref.nativeEvent.layout.width;
    setMessageContentWidth(width);
  };
  var isAIGenerated = (0, _react.useMemo)(function () {
    return isMessageAIGenerated(message);
  }, [message, isMessageAIGenerated]);
  var _useMessageData = (0, _useMessageData2.useMessageData)({}),
    hasThreadReplies = _useMessageData.hasThreadReplies,
    isMessageErrorType = _useMessageData.isMessageErrorType,
    isMessageReceivedOrErrorType = _useMessageData.isMessageReceivedOrErrorType;
  var repliesCurveColor = !isMessageReceivedOrErrorType ? backgroundColor : light_gray;
  var getBorderRadius = function getBorderRadius() {
    var groupPosition = groupStyles == null ? void 0 : groupStyles[0];
    var isBottomOrSingle = groupPosition === 'single' || groupPosition === 'bottom';
    var borderBottomLeftRadius = borderRadiusL;
    var borderBottomRightRadius = borderRadiusL;
    if (isBottomOrSingle && (!hasThreadReplies || threadList)) {
      if (isMyMessage) {
        borderBottomRightRadius = borderRadiusS;
      } else {
        borderBottomLeftRadius = borderRadiusS;
      }
    }
    return {
      borderBottomLeftRadius: borderBottomLeftRadius,
      borderBottomRightRadius: borderBottomRightRadius
    };
  };
  var getBorderRadiusFromTheme = function getBorderRadiusFromTheme() {
    var bordersFromTheme = {
      borderBottomLeftRadius: borderBottomLeftRadius,
      borderBottomRightRadius: borderBottomRightRadius,
      borderRadius: borderRadius,
      borderTopLeftRadius: borderTopLeftRadius,
      borderTopRightRadius: borderTopRightRadius
    };
    for (var key in bordersFromTheme) {
      if (bordersFromTheme[key] === undefined) {
        delete bordersFromTheme[key];
      }
    }
    return bordersFromTheme;
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Pressable, Object.assign({
    disabled: preventPress,
    onLongPress: function onLongPress(event) {
      if (_onLongPress) {
        _onLongPress({
          emitter: 'messageContent',
          event: event
        });
      }
    },
    onPress: function onPress(event) {
      if (_onPress) {
        _onPress({
          emitter: 'messageContent',
          event: event
        });
      }
    },
    onPressIn: function onPressIn(event) {
      if (_onPressIn) {
        _onPressIn({
          emitter: 'messageContent',
          event: event
        });
      }
    },
    style: function style(_ref2) {
      var pressed = _ref2.pressed;
      return [{
        opacity: pressed ? 0.5 : 1
      }, container];
    }
  }, additionalPressableProps, {
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      onLayout: onLayout,
      style: wrapper,
      children: [hasThreadReplies && !threadList && !noBorder && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.replyBorder, {
          borderColor: repliesCurveColor,
          height: borderRadiusL,
          left: alignment === 'left' ? 0 : undefined,
          right: alignment === 'right' ? 0 : undefined
        }, replyBorder]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.containerInner, Object.assign({
          backgroundColor: backgroundColor,
          borderColor: isMessageReceivedOrErrorType ? grey_whisper : backgroundColor
        }, getBorderRadius(), getBorderRadiusFromTheme()), noBorder ? {
          borderWidth: 0
        } : {}, containerInner, messageGroupedSingleOrBottom ? isVeryLastMessage && enableMessageGroupingByUser ? lastMessageContainer : messageGroupedSingleOrBottomContainer : messageGroupedTopContainer],
        testID: "message-content-wrapper",
        children: messageContentOrder.map(function (messageContentType, messageContentOrderIndex) {
          switch (messageContentType) {
            case 'quoted_reply':
              return message.quoted_message && (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.replyContainer, replyContainer],
                children: (0, _jsxRuntime.jsx)(Reply, {
                  styles: {
                    messageContainer: {
                      maxWidth: vw(60)
                    }
                  }
                })
              }, "quoted_reply_".concat(messageContentOrderIndex));
            case 'attachments':
              return otherAttachments.map(function (attachment, attachmentIndex) {
                return (0, _jsxRuntime.jsx)(Attachment, {
                  attachment: attachment
                }, "".concat(message.id, "-").concat(attachmentIndex));
              });
            case 'files':
              return (0, _jsxRuntime.jsx)(FileAttachmentGroup, {
                messageId: message.id
              }, "file_attachment_group_".concat(messageContentOrderIndex));
            case 'gallery':
              return (0, _jsxRuntime.jsx)(Gallery, {}, "gallery_".concat(messageContentOrderIndex));
            case 'poll':
              {
                var pollId = message.poll_id;
                var poll = pollId && client.polls.fromState(pollId);
                return pollId && poll ? (0, _jsxRuntime.jsx)(_Poll.Poll, {
                  message: message,
                  poll: poll,
                  PollContent: PollContentOverride
                }, "poll_".concat(message.poll_id)) : null;
              }
            case 'ai_text':
              return isAIGenerated ? (0, _jsxRuntime.jsx)(StreamingMessageView, {}, "ai_message_text_container_".concat(messageContentOrderIndex)) : null;
            case 'text':
            default:
              return otherAttachments.length && otherAttachments[0].actions || isAIGenerated ? null : (0, _jsxRuntime.jsx)(_MessageTextContainer.MessageTextContainer, {}, "message_text_container_".concat(messageContentOrderIndex));
          }
        })
      }), isMessageErrorType && (0, _jsxRuntime.jsx)(MessageError, {})]
    })
  }));
};
var areEqual = function areEqual(prevProps, nextProps) {
  var _prevOtherAttachments, _nextOtherAttachments, _prevMessage$quoted_m, _nextMessage$quoted_m, _prevMessage$quoted_m2, _nextMessage$quoted_m2;
  var prevGoToMessage = prevProps.goToMessage,
    prevGroupStyles = prevProps.groupStyles,
    isAttachmentEqual = prevProps.isAttachmentEqual,
    prevIsEditedMessageOpen = prevProps.isEditedMessageOpen,
    prevMessage = prevProps.message,
    prevMessageContentOrder = prevProps.messageContentOrder,
    prevMyMessageTheme = prevProps.myMessageTheme,
    prevOtherAttachments = prevProps.otherAttachments,
    prevT = prevProps.t;
  var nextGoToMessage = nextProps.goToMessage,
    nextGroupStyles = nextProps.groupStyles,
    nextIsEditedMessageOpen = nextProps.isEditedMessageOpen,
    nextMessage = nextProps.message,
    nextMessageContentOrder = nextProps.messageContentOrder,
    nextMyMessageTheme = nextProps.myMessageTheme,
    nextOtherAttachments = nextProps.otherAttachments,
    nextT = nextProps.t;
  var goToMessageChangedAndMatters = nextMessage.quoted_message_id && prevGoToMessage !== nextGoToMessage;
  if (goToMessageChangedAndMatters) {
    return false;
  }
  var isEditedMessageOpenEqual = prevIsEditedMessageOpen === nextIsEditedMessageOpen;
  if (!isEditedMessageOpenEqual) {
    return false;
  }
  var otherAttachmentsEqual = prevOtherAttachments.length === nextOtherAttachments.length && (prevOtherAttachments == null || (_prevOtherAttachments = prevOtherAttachments[0]) == null || (_prevOtherAttachments = _prevOtherAttachments.actions) == null ? void 0 : _prevOtherAttachments.length) === (nextOtherAttachments == null || (_nextOtherAttachments = nextOtherAttachments[0]) == null || (_nextOtherAttachments = _nextOtherAttachments.actions) == null ? void 0 : _nextOtherAttachments.length);
  if (!otherAttachmentsEqual) {
    return false;
  }
  var groupStylesEqual = prevGroupStyles.length === nextGroupStyles.length && (prevGroupStyles == null ? void 0 : prevGroupStyles[0]) === (nextGroupStyles == null ? void 0 : nextGroupStyles[0]);
  if (!groupStylesEqual) {
    return false;
  }
  var isPrevMessageTypeDeleted = prevMessage.type === 'deleted';
  var isNextMessageTypeDeleted = nextMessage.type === 'deleted';
  var messageEqual = isPrevMessageTypeDeleted === isNextMessageTypeDeleted && prevMessage.reply_count === nextMessage.reply_count && prevMessage.status === nextMessage.status && prevMessage.type === nextMessage.type && prevMessage.text === nextMessage.text && prevMessage.pinned === nextMessage.pinned && prevMessage.i18n === nextMessage.i18n;
  if (!messageEqual) {
    return false;
  }
  var isPrevQuotedMessageTypeDeleted = ((_prevMessage$quoted_m = prevMessage.quoted_message) == null ? void 0 : _prevMessage$quoted_m.type) === 'deleted';
  var isNextQuotedMessageTypeDeleted = ((_nextMessage$quoted_m = nextMessage.quoted_message) == null ? void 0 : _nextMessage$quoted_m.type) === 'deleted';
  var quotedMessageEqual = ((_prevMessage$quoted_m2 = prevMessage.quoted_message) == null ? void 0 : _prevMessage$quoted_m2.id) === ((_nextMessage$quoted_m2 = nextMessage.quoted_message) == null ? void 0 : _nextMessage$quoted_m2.id) && isPrevQuotedMessageTypeDeleted === isNextQuotedMessageTypeDeleted;
  if (!quotedMessageEqual) {
    return false;
  }
  var prevMessageAttachments = prevMessage.attachments;
  var nextMessageAttachments = nextMessage.attachments;
  var attachmentsEqual = Array.isArray(prevMessageAttachments) && Array.isArray(nextMessageAttachments) ? prevMessageAttachments.length === nextMessageAttachments.length && prevMessageAttachments.every(function (attachment, index) {
    var attachmentKeysEqual = attachment.image_url === nextMessageAttachments[index].image_url && attachment.og_scrape_url === nextMessageAttachments[index].og_scrape_url && attachment.thumb_url === nextMessageAttachments[index].thumb_url && attachment.type === nextMessageAttachments[index].type;
    if (isAttachmentEqual) {
      return attachmentKeysEqual && !!isAttachmentEqual(attachment, nextMessageAttachments[index]);
    }
    return attachmentKeysEqual;
  }) : prevMessageAttachments === nextMessageAttachments;
  if (!attachmentsEqual) {
    return false;
  }
  var latestReactionsEqual = Array.isArray(prevMessage.latest_reactions) && Array.isArray(nextMessage.latest_reactions) ? prevMessage.latest_reactions.length === nextMessage.latest_reactions.length && prevMessage.latest_reactions.every(function (_ref3, index) {
    var _nextMessage$latest_r;
    var type = _ref3.type;
    return type === ((_nextMessage$latest_r = nextMessage.latest_reactions) == null ? void 0 : _nextMessage$latest_r[index].type);
  }) : prevMessage.latest_reactions === nextMessage.latest_reactions;
  if (!latestReactionsEqual) {
    return false;
  }
  var messageContentOrderEqual = prevMessageContentOrder.length === nextMessageContentOrder.length && prevMessageContentOrder.every(function (messageContentType, index) {
    return messageContentType === nextMessageContentOrder[index];
  });
  if (!messageContentOrderEqual) {
    return false;
  }
  var tEqual = prevT === nextT;
  if (!tEqual) {
    return false;
  }
  var messageThemeEqual = JSON.stringify(prevMyMessageTheme) === JSON.stringify(nextMyMessageTheme);
  if (!messageThemeEqual) {
    return false;
  }
  return true;
};
var MemoizedMessageContent = _react["default"].memo(MessageContentWithContext, areEqual);
var MessageContent = exports.MessageContent = function MessageContent(props) {
  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
    alignment = _useMessageContext.alignment,
    goToMessage = _useMessageContext.goToMessage,
    groupStyles = _useMessageContext.groupStyles,
    isEditedMessageOpen = _useMessageContext.isEditedMessageOpen,
    isMessageAIGenerated = _useMessageContext.isMessageAIGenerated,
    isMyMessage = _useMessageContext.isMyMessage,
    lastReceivedId = _useMessageContext.lastReceivedId,
    message = _useMessageContext.message,
    messageContentOrder = _useMessageContext.messageContentOrder,
    onLongPress = _useMessageContext.onLongPress,
    onPress = _useMessageContext.onPress,
    onPressIn = _useMessageContext.onPressIn,
    otherAttachments = _useMessageContext.otherAttachments,
    preventPress = _useMessageContext.preventPress,
    threadList = _useMessageContext.threadList;
  var _useMessagesContext2 = (0, _MessagesContext.useMessagesContext)(),
    additionalPressableProps = _useMessagesContext2.additionalPressableProps,
    Attachment = _useMessagesContext2.Attachment,
    enableMessageGroupingByUser = _useMessagesContext2.enableMessageGroupingByUser,
    FileAttachmentGroup = _useMessagesContext2.FileAttachmentGroup,
    Gallery = _useMessagesContext2.Gallery,
    isAttachmentEqual = _useMessagesContext2.isAttachmentEqual,
    MessageError = _useMessagesContext2.MessageError,
    myMessageTheme = _useMessagesContext2.myMessageTheme,
    Reply = _useMessagesContext2.Reply,
    StreamingMessageView = _useMessagesContext2.StreamingMessageView;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  return (0, _jsxRuntime.jsx)(MemoizedMessageContent, Object.assign({
    additionalPressableProps: additionalPressableProps,
    alignment: alignment,
    Attachment: Attachment,
    enableMessageGroupingByUser: enableMessageGroupingByUser,
    FileAttachmentGroup: FileAttachmentGroup,
    Gallery: Gallery,
    goToMessage: goToMessage,
    groupStyles: groupStyles,
    isAttachmentEqual: isAttachmentEqual,
    isEditedMessageOpen: isEditedMessageOpen,
    isMessageAIGenerated: isMessageAIGenerated,
    isMyMessage: isMyMessage,
    lastReceivedId: lastReceivedId,
    message: message,
    messageContentOrder: messageContentOrder,
    MessageError: MessageError,
    myMessageTheme: myMessageTheme,
    onLongPress: onLongPress,
    onPress: onPress,
    onPressIn: onPressIn,
    otherAttachments: otherAttachments,
    preventPress: preventPress,
    Reply: Reply,
    StreamingMessageView: StreamingMessageView,
    t: t,
    threadList: threadList
  }, props));
};
//# sourceMappingURL=MessageContent.js.map