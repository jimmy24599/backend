var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateMarkdownText = void 0;
var _truncate = _interopRequireDefault(require("lodash/truncate"));
var _parseLinks = require("./parseLinks");
var _utils = require("../../../../utils/utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var generateMarkdownText = exports.generateMarkdownText = function generateMarkdownText(text) {
  if (!text) {
    return null;
  }
  var resultText = text.trim();
  var linkInfos = (0, _parseLinks.parseLinksFromText)(resultText);
  var _iterator = _createForOfIteratorHelper(linkInfos),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var linkInfo = _step.value;
      var displayLink = (0, _truncate["default"])(linkInfo.raw, {
        length: 200,
        omission: '...'
      });
      var normalRegEx = new RegExp((0, _utils.escapeRegExp)(linkInfo.raw), 'g');
      var markdown = "[".concat(displayLink, "](").concat(linkInfo.url, ")");
      resultText = text.replace(normalRegEx, markdown);
      var mentionsRegex = new RegExp("@\\[".concat((0, _utils.escapeRegExp)(displayLink), "\\]\\(").concat((0, _utils.escapeRegExp)(linkInfo.url), "\\)"), 'g');
      resultText = resultText.replace(mentionsRegex, "@".concat(displayLink));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  resultText = resultText.replace(/(```[\s\S]*?```|`.*?`)|[<"']/g, function (match, code) {
    if (code) {
      return code;
    }
    return "\\".concat(match);
  });
  resultText = resultText.replace(/(```[\s\S]*?```|`.*?`)|\n[ ]{2,}/g, function (_, code) {
    if (code) {
      return code;
    }
    return '\n';
  });
  resultText = resultText.replace(/\n```/g, '\n\n```');
  return resultText;
};
//# sourceMappingURL=generateMarkdownText.js.map