var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AITypingIndicatorView = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _useAIState2 = require("./hooks/useAIState");
var _contexts = require("../../contexts");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AITypingIndicatorView/AITypingIndicatorView.tsx";
var AITypingIndicatorView = exports.AITypingIndicatorView = function AITypingIndicatorView(_ref) {
  var channelFromProps = _ref.channel;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useChannelContext = (0, _contexts.useChannelContext)(),
    channelFromContext = _useChannelContext.channel;
  var channel = channelFromProps || channelFromContext;
  var _useAIState = (0, _useAIState2.useAIState)(channel),
    aiState = _useAIState.aiState;
  var allowedStates = (0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _useAIState2.AIStates.Thinking, t('Thinking...')), _useAIState2.AIStates.Generating, t('Generating...'));
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$aiTyp = _useTheme$theme.aiTypingIndicatorView,
    container = _useTheme$theme$aiTyp.container,
    text = _useTheme$theme$aiTyp.text,
    _useTheme$theme$color = _useTheme$theme.colors,
    black = _useTheme$theme$color.black,
    grey_gainsboro = _useTheme$theme$color.grey_gainsboro;
  return aiState in allowedStates ? (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: grey_gainsboro
    }, container],
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [{
        color: black
      }, text],
      children: allowedStates[aiState]
    })
  }) : null;
};
AITypingIndicatorView.displayName = 'AITypingIndicatorView{messageSimple{content}}';
var styles = _reactNative.StyleSheet.create({
  container: {
    paddingHorizontal: 16,
    paddingVertical: 18
  }
});
//# sourceMappingURL=AITypingIndicatorView.js.map