var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageUserReactionsItem = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ChatContext = require("../../contexts/chatContext/ChatContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _icons = require("../../icons");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageMenu/MessageUserReactionsItem.tsx";
var MessageUserReactionsItem = exports.MessageUserReactionsItem = function MessageUserReactionsItem(_ref) {
  var _supportedReactions$f, _supportedReactions$f2;
  var MessageUserReactionsAvatar = _ref.MessageUserReactionsAvatar,
    reaction = _ref.reaction,
    supportedReactions = _ref.supportedReactions;
  var id = reaction.id,
    name = reaction.name,
    type = reaction.type;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_blue = _useTheme$theme$color.accent_blue,
    black = _useTheme$theme$color.black,
    grey = _useTheme$theme$color.grey,
    grey_gainsboro = _useTheme$theme$color.grey_gainsboro,
    white = _useTheme$theme$color.white,
    _useTheme$theme$messa = _useTheme$theme.messageMenu.userReactions,
    avatarContainer = _useTheme$theme$messa.avatarContainer,
    avatarInnerContainer = _useTheme$theme$messa.avatarInnerContainer,
    avatarName = _useTheme$theme$messa.avatarName,
    avatarNameContainer = _useTheme$theme$messa.avatarNameContainer,
    avatarSize = _useTheme$theme$messa.avatarSize,
    radius = _useTheme$theme$messa.radius,
    reactionBubbleBackground = _useTheme$theme$messa.reactionBubbleBackground,
    reactionBubbleBorderRadius = _useTheme$theme$messa.reactionBubbleBorderRadius;
  var _useChatContext = (0, _ChatContext.useChatContext)(),
    client = _useChatContext.client;
  var alignment = client.userID && client.userID === id ? 'left' : 'right';
  var x = avatarSize / 2 - avatarSize / (radius * 4) * (alignment === 'left' ? 1 : -1);
  var y = avatarSize - radius;
  var left = alignment === 'left' ? x - (Number(reactionBubbleBackground.width || 0) || styles.reactionBubbleBackground.width) + radius : x - radius;
  var top = y - radius - (Number(reactionBubbleBackground.height || 0) || styles.reactionBubbleBackground.height);
  var Icon = (_supportedReactions$f = (_supportedReactions$f2 = supportedReactions.find(function (reaction) {
    return reaction.type === type;
  })) == null ? void 0 : _supportedReactions$f2.Icon) != null ? _supportedReactions$f : _icons.Unknown;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    accessibilityLabel: "Individual User Reaction on long press message",
    style: [styles.avatarContainer, avatarContainer],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.avatarInnerContainer, avatarInnerContainer],
      children: [(0, _jsxRuntime.jsx)(MessageUserReactionsAvatar, {
        reaction: reaction,
        size: avatarSize
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.reactionBubbleBackground, {
          backgroundColor: grey_gainsboro,
          borderColor: alignment === 'left' ? white : grey_gainsboro,
          borderWidth: radius / 2,
          left: left,
          top: top
        }, reactionBubbleBackground],
        children: (0, _jsxRuntime.jsx)(Icon, {
          height: reactionBubbleBorderRadius / 2,
          pathFill: alignment === 'left' ? accent_blue : grey,
          width: reactionBubbleBorderRadius / 2
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.avatarNameContainer, avatarNameContainer],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        numberOfLines: 2,
        style: [styles.avatarName, {
          color: black
        }, avatarName],
        children: name
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  avatarContainer: {
    marginBottom: 8
  },
  avatarInnerContainer: {
    alignSelf: 'center'
  },
  avatarName: {
    flex: 1,
    fontSize: 12,
    fontWeight: '700',
    paddingTop: 6,
    textAlign: 'center'
  },
  avatarNameContainer: {
    alignItems: 'center',
    flexDirection: 'row',
    flexGrow: 1
  },
  reactionBubbleBackground: {
    alignItems: 'center',
    borderRadius: 24,
    height: 24,
    justifyContent: 'center',
    position: 'absolute',
    width: 24
  }
});
//# sourceMappingURL=MessageUserReactionsItem.js.map