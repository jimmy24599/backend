var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageActionList = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageMenu/MessageActionList.tsx";
var MessageActionList = exports.MessageActionList = function MessageActionList(props) {
  var MessageActionListItem = props.MessageActionListItem,
    messageActions = props.messageActions;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme$messa = _useTheme.theme.messageMenu.actionList,
    container = _useTheme$theme$messa.container,
    contentContainer = _useTheme$theme$messa.contentContainer;
  if ((messageActions == null ? void 0 : messageActions.length) === 0) {
    return null;
  }
  return (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.ScrollView, {
    accessibilityLabel: "Message action list",
    contentContainerStyle: [styles.contentContainer, contentContainer],
    style: [styles.container, container],
    children: messageActions == null ? void 0 : messageActions.map(function (messageAction, index) {
      return (0, _jsxRuntime.jsx)(MessageActionListItem, Object.assign({}, Object.assign({}, messageAction, {
        index: index,
        length: messageActions.length
      })), messageAction.title);
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {},
  contentContainer: {
    paddingHorizontal: 16
  }
});
//# sourceMappingURL=MessageActionList.js.map