var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageMenu = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _MessageContext = require("../../contexts/messageContext/MessageContext");
var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _BottomSheetModal = require("../UIComponents/BottomSheetModal");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageMenu/MessageMenu.tsx";
var MessageMenu = exports.MessageMenu = function MessageMenu(props) {
  var _message$own_reaction;
  var dismissOverlay = props.dismissOverlay,
    handleReaction = props.handleReaction,
    propMessage = props.message,
    propMessageActionList = props.MessageActionList,
    propMessageActionListItem = props.MessageActionListItem,
    messageActions = props.messageActions,
    propMessageReactionPicker = props.MessageReactionPicker,
    propMessageUserReactions = props.MessageUserReactions,
    propMessageUserReactionsAvatar = props.MessageUserReactionsAvatar,
    propMessageUserReactionsItem = props.MessageUserReactionsItem,
    selectedReaction = props.selectedReaction,
    showMessageReactions = props.showMessageReactions,
    visible = props.visible;
  var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),
    height = _useWindowDimensions.height;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    contextMessageActionList = _useMessagesContext.MessageActionList,
    contextMessageActionListItem = _useMessagesContext.MessageActionListItem,
    contextMessageReactionPicker = _useMessagesContext.MessageReactionPicker,
    contextMessageUserReactions = _useMessagesContext.MessageUserReactions,
    contextMessageUserReactionsAvatar = _useMessagesContext.MessageUserReactionsAvatar,
    contextMessageUserReactionsItem = _useMessagesContext.MessageUserReactionsItem;
  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
    contextMessage = _useMessageContext.message;
  var MessageActionList = propMessageActionList != null ? propMessageActionList : contextMessageActionList;
  var MessageActionListItem = propMessageActionListItem != null ? propMessageActionListItem : contextMessageActionListItem;
  var MessageReactionPicker = propMessageReactionPicker != null ? propMessageReactionPicker : contextMessageReactionPicker;
  var MessageUserReactions = propMessageUserReactions != null ? propMessageUserReactions : contextMessageUserReactions;
  var MessageUserReactionsAvatar = propMessageUserReactionsAvatar != null ? propMessageUserReactionsAvatar : contextMessageUserReactionsAvatar;
  var MessageUserReactionsItem = propMessageUserReactionsItem != null ? propMessageUserReactionsItem : contextMessageUserReactionsItem;
  var message = propMessage != null ? propMessage : contextMessage;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    bottomSheetHeight = _useTheme.theme.messageMenu.bottomSheet.height;
  return (0, _jsxRuntime.jsx)(_BottomSheetModal.BottomSheetModal, {
    height: bottomSheetHeight ? bottomSheetHeight : messageActions.length === 0 && !showMessageReactions ? height / 5 : height / 2,
    onClose: dismissOverlay,
    visible: visible,
    children: showMessageReactions ? (0, _jsxRuntime.jsx)(MessageUserReactions, {
      message: message,
      MessageUserReactionsAvatar: MessageUserReactionsAvatar,
      MessageUserReactionsItem: MessageUserReactionsItem,
      selectedReaction: selectedReaction
    }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [(0, _jsxRuntime.jsx)(MessageReactionPicker, {
        dismissOverlay: dismissOverlay,
        handleReaction: handleReaction,
        ownReactionTypes: (message == null || (_message$own_reaction = message.own_reactions) == null ? void 0 : _message$own_reaction.map(function (reaction) {
          return reaction.type;
        })) || []
      }), (0, _jsxRuntime.jsx)(MessageActionList, {
        dismissOverlay: dismissOverlay,
        MessageActionListItem: MessageActionListItem,
        messageActions: messageActions
      })]
    })
  });
};
//# sourceMappingURL=MessageMenu.js.map