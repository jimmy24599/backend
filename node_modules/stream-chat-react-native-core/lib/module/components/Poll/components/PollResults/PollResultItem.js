var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShowAllVotesButton = exports.PollResultsItem = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _PollOptionFullResults = require("./PollOptionFullResults");
var _PollVote = require("./PollVote");
var _contexts = require("../../../../contexts");
var _usePollState3 = require("../../hooks/usePollState");
var _Button = require("../Button");
var _PollModalHeader = require("../PollModalHeader");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollResults/PollResultItem.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var ShowAllVotesButton = exports.ShowAllVotesButton = function ShowAllVotesButton(props) {
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _usePollContext = (0, _contexts.usePollContext)(),
    message = _usePollContext.message,
    poll = _usePollContext.poll;
  var _usePollState = (0, _usePollState3.usePollState)(),
    voteCountsByOption = _usePollState.voteCountsByOption;
  var ownCapabilities = (0, _contexts.useOwnCapabilitiesContext)();
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    showAllVotes = _useState2[0],
    setShowAllVotes = _useState2[1];
  var onPress = props.onPress,
    option = props.option;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        option: option,
        poll: poll
      });
      return;
    }
    setShowAllVotes(true);
  }, [message, onPress, option, poll]);
  var _useTheme = (0, _contexts.useTheme)(),
    white = _useTheme.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [ownCapabilities.queryPollVotes && voteCountsByOption && (voteCountsByOption == null ? void 0 : voteCountsByOption[option.id]) > 5 ? (0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
      onPress: onPressHandler,
      title: t('Show All')
    }) : null, showAllVotes ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "fade",
      onRequestClose: function onRequestClose() {
        return setShowAllVotes(false);
      },
      visible: showAllVotes,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowAllVotes(false);
          },
          title: option.text
        }), (0, _jsxRuntime.jsx)(_PollOptionFullResults.PollOptionFullResults, {
          message: message,
          option: option,
          poll: poll
        })]
      })
    }) : null]
  });
};
var PollResultsVoteItem = function PollResultsVoteItem(vote) {
  return (0, _jsxRuntime.jsx)(_PollVote.PollVote, {
    vote: vote
  }, "results_vote_".concat(vote.id));
};
var PollResultsItem = exports.PollResultsItem = function PollResultsItem(_ref) {
  var _voteCountsByOption$o, _latestVotesByOption$, _latestVotesByOption$2;
  var option = _ref.option;
  var _useTranslationContex2 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex2.t;
  var _usePollState2 = (0, _usePollState3.usePollState)(),
    latestVotesByOption = _usePollState2.latestVotesByOption,
    voteCountsByOption = _usePollState2.voteCountsByOption;
  var _useTheme2 = (0, _contexts.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    _useTheme2$theme$colo = _useTheme2$theme.colors,
    bg_user = _useTheme2$theme$colo.bg_user,
    black = _useTheme2$theme$colo.black,
    _useTheme2$theme$poll = _useTheme2$theme.poll.results.item,
    container = _useTheme2$theme$poll.container,
    headerContainer = _useTheme2$theme$poll.headerContainer,
    title = _useTheme2$theme$poll.title,
    voteCount = _useTheme2$theme$poll.voteCount;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: bg_user
    }, container],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.headerContainer, headerContainer],
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.title, {
          color: black
        }, title],
        children: option.text
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.voteCount, {
          color: black
        }, voteCount],
        children: t('{{count}} votes', {
          count: (_voteCountsByOption$o = voteCountsByOption[option.id]) != null ? _voteCountsByOption$o : 0
        })
      })]
    }), (latestVotesByOption == null || (_latestVotesByOption$ = latestVotesByOption[option.id]) == null ? void 0 : _latestVotesByOption$.length) > 0 ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        marginTop: 16
      },
      children: ((_latestVotesByOption$2 = latestVotesByOption == null ? void 0 : latestVotesByOption[option.id]) != null ? _latestVotesByOption$2 : []).slice(0, 5).map(PollResultsVoteItem)
    }) : null, (0, _jsxRuntime.jsx)(ShowAllVotesButton, {
      option: option
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 12,
    marginBottom: 8,
    paddingHorizontal: 16,
    paddingVertical: 12
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  title: {
    flex: 1,
    fontSize: 16,
    fontWeight: '500'
  },
  voteCount: {
    fontSize: 16,
    marginLeft: 16
  }
});
//# sourceMappingURL=PollResultItem.js.map