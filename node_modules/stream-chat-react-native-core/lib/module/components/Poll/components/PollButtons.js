var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewResultsButton = exports.SuggestOptionButton = exports.ShowAllOptionsButton = exports.ShowAllCommentsButton = exports.PollButtons = exports.EndVoteButton = exports.AddCommentButton = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Button = require("./Button");
var _PollAnswersList = require("./PollAnswersList");
var _PollInputDialog = require("./PollInputDialog");
var _PollModalHeader = require("./PollModalHeader");
var _PollOption = require("./PollOption");
var _PollResults = require("./PollResults");
var _contexts = require("../../../contexts");
var _usePollState6 = require("../hooks/usePollState");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollButtons.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var ViewResultsButton = exports.ViewResultsButton = function ViewResultsButton(props) {
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _usePollContext = (0, _contexts.usePollContext)(),
    message = _usePollContext.message,
    poll = _usePollContext.poll;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    showResults = _useState2[0],
    setShowResults = _useState2[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowResults(true);
  }, [message, onPress, poll]);
  var _useTheme = (0, _contexts.useTheme)(),
    white = _useTheme.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
      onPress: onPressHandler,
      title: t('View Results')
    }), showResults ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      onRequestClose: function onRequestClose() {
        return setShowResults(false);
      },
      visible: showResults,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowResults(false);
          },
          title: t('Poll Results')
        }), (0, _jsxRuntime.jsx)(_PollResults.PollResults, {
          message: message,
          poll: poll
        })]
      })
    }) : null]
  });
};
var ShowAllOptionsButton = exports.ShowAllOptionsButton = function ShowAllOptionsButton(props) {
  var _useTranslationContex2 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex2.t;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    showAllOptions = _useState4[0],
    setShowAllOptions = _useState4[1];
  var _usePollContext2 = (0, _contexts.usePollContext)(),
    message = _usePollContext2.message,
    poll = _usePollContext2.poll;
  var _usePollState = (0, _usePollState6.usePollState)(),
    options = _usePollState.options;
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAllOptions(true);
  }, [message, onPress, poll]);
  var _useTheme2 = (0, _contexts.useTheme)(),
    white = _useTheme2.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [options && options.length > 10 ? (0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
      onPress: onPressHandler,
      title: t('See all {{count}} options', {
        count: options.length
      })
    }) : null, showAllOptions ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      onRequestClose: function onRequestClose() {
        return setShowAllOptions(false);
      },
      visible: showAllOptions,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowAllOptions(false);
          },
          title: t('Poll Options')
        }), (0, _jsxRuntime.jsx)(_PollOption.PollAllOptions, {
          message: message,
          poll: poll
        })]
      })
    }) : null]
  });
};
var ShowAllCommentsButton = exports.ShowAllCommentsButton = function ShowAllCommentsButton(props) {
  var _useTranslationContex3 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex3.t;
  var _usePollContext3 = (0, _contexts.usePollContext)(),
    message = _usePollContext3.message,
    poll = _usePollContext3.poll;
  var _usePollState2 = (0, _usePollState6.usePollState)(),
    answersCount = _usePollState2.answersCount;
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    showAnswers = _useState6[0],
    setShowAnswers = _useState6[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAnswers(true);
  }, [message, onPress, poll]);
  var _useTheme3 = (0, _contexts.useTheme)(),
    white = _useTheme3.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [answersCount && answersCount > 0 ? (0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
      onPress: onPressHandler,
      title: t('View {{count}} comments', {
        count: answersCount
      })
    }) : null, showAnswers ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      onRequestClose: function onRequestClose() {
        return setShowAnswers(false);
      },
      visible: showAnswers,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowAnswers(false);
          },
          title: t('Poll Comments')
        }), (0, _jsxRuntime.jsx)(_PollAnswersList.PollAnswersList, {
          message: message,
          poll: poll
        })]
      })
    }) : null]
  });
};
var SuggestOptionButton = exports.SuggestOptionButton = function SuggestOptionButton(props) {
  var _useTranslationContex4 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex4.t;
  var _usePollContext4 = (0, _contexts.usePollContext)(),
    message = _usePollContext4.message,
    poll = _usePollContext4.poll;
  var _usePollState3 = (0, _usePollState6.usePollState)(),
    addOption = _usePollState3.addOption,
    allowUserSuggestedOptions = _usePollState3.allowUserSuggestedOptions,
    isClosed = _usePollState3.isClosed;
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    showAddOptionDialog = _useState8[0],
    setShowAddOptionDialog = _useState8[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAddOptionDialog(true);
  }, [message, onPress, poll]);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [!isClosed && allowUserSuggestedOptions ? (0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
      onPress: onPressHandler,
      title: t('Suggest an option')
    }) : null, showAddOptionDialog ? (0, _jsxRuntime.jsx)(_PollInputDialog.PollInputDialog, {
      closeDialog: function closeDialog() {
        return setShowAddOptionDialog(false);
      },
      onSubmit: addOption,
      title: t('Suggest an option'),
      visible: showAddOptionDialog
    }) : null]
  });
};
var AddCommentButton = exports.AddCommentButton = function AddCommentButton(props) {
  var _ownAnswer$answer_tex;
  var _useTranslationContex5 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex5.t;
  var _usePollContext5 = (0, _contexts.usePollContext)(),
    message = _usePollContext5.message,
    poll = _usePollContext5.poll;
  var _usePollState4 = (0, _usePollState6.usePollState)(),
    addComment = _usePollState4.addComment,
    allowAnswers = _usePollState4.allowAnswers,
    isClosed = _usePollState4.isClosed,
    ownAnswer = _usePollState4.ownAnswer;
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    showAddCommentDialog = _useState10[0],
    setShowAddCommentDialog = _useState10[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAddCommentDialog(true);
  }, [message, onPress, poll]);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [!isClosed && allowAnswers ? (0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
      onPress: onPressHandler,
      title: t('Add a comment')
    }) : null, showAddCommentDialog ? (0, _jsxRuntime.jsx)(_PollInputDialog.PollInputDialog, {
      closeDialog: function closeDialog() {
        return setShowAddCommentDialog(false);
      },
      initialValue: (_ownAnswer$answer_tex = ownAnswer == null ? void 0 : ownAnswer.answer_text) != null ? _ownAnswer$answer_tex : '',
      onSubmit: addComment,
      title: t('Add a comment'),
      visible: showAddCommentDialog
    }) : null]
  });
};
var EndVoteButton = exports.EndVoteButton = function EndVoteButton() {
  var _useTranslationContex6 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex6.t;
  var _usePollState5 = (0, _usePollState6.usePollState)(),
    createdBy = _usePollState5.createdBy,
    endVote = _usePollState5.endVote,
    isClosed = _usePollState5.isClosed;
  var _useChatContext = (0, _contexts.useChatContext)(),
    client = _useChatContext.client;
  return !isClosed && (createdBy == null ? void 0 : createdBy.id) === client.userID ? (0, _jsxRuntime.jsx)(_Button.GenericPollButton, {
    onPress: endVote,
    title: t('End Vote')
  }) : null;
};
var PollButtons = exports.PollButtons = function PollButtons() {
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(ShowAllOptionsButton, {}), (0, _jsxRuntime.jsx)(ShowAllCommentsButton, {}), (0, _jsxRuntime.jsx)(SuggestOptionButton, {}), (0, _jsxRuntime.jsx)(AddCommentButton, {}), (0, _jsxRuntime.jsx)(ViewResultsButton, {}), (0, _jsxRuntime.jsx)(EndVoteButton, {})]
  });
};
//# sourceMappingURL=PollButtons.js.map