var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoteButton = exports.PollOption = exports.PollAllOptionsContent = exports.PollAllOptions = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _contexts = require("../../../contexts");
var _icons = require("../../../icons");
var _Avatar = require("../../Avatar/Avatar");
var _usePollState4 = require("../hooks/usePollState");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollOption.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PollAllOptionsContent = exports.PollAllOptionsContent = function PollAllOptionsContent(_ref) {
  var additionalScrollViewProps = _ref.additionalScrollViewProps;
  var _usePollState = (0, _usePollState4.usePollState)(),
    name = _usePollState.name,
    options = _usePollState.options;
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$poll$ = _useTheme$theme.poll.allOptions,
    listContainer = _useTheme$theme$poll$.listContainer,
    titleContainer = _useTheme$theme$poll$.titleContainer,
    titleText = _useTheme$theme$poll$.titleText,
    wrapper = _useTheme$theme$poll$.wrapper;
  return (0, _jsxRuntime.jsxs)(_reactNativeGestureHandler.ScrollView, Object.assign({
    contentContainerStyle: {
      paddingBottom: 70
    },
    style: [styles.allOptionsWrapper, {
      backgroundColor: white
    }, wrapper]
  }, additionalScrollViewProps, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.allOptionsTitleContainer, {
        backgroundColor: bg_user
      }, titleContainer],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.allOptionsTitleText, {
          color: black
        }, titleText],
        children: name
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.allOptionsListContainer, {
        backgroundColor: bg_user
      }, listContainer],
      children: options == null ? void 0 : options.map(function (option) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            paddingVertical: 16
          },
          children: (0, _jsxRuntime.jsx)(PollOption, {
            option: option,
            showProgressBar: false
          }, option.id)
        }, "full_poll_options_".concat(option.id));
      })
    })]
  }));
};
var PollAllOptions = exports.PollAllOptions = function PollAllOptions(_ref2) {
  var additionalScrollViewProps = _ref2.additionalScrollViewProps,
    message = _ref2.message,
    poll = _ref2.poll,
    PollAllOptionsContentOverride = _ref2.PollAllOptionsContent;
  return (0, _jsxRuntime.jsx)(_contexts.PollContextProvider, {
    value: {
      message: message,
      poll: poll
    },
    children: PollAllOptionsContentOverride ? (0, _jsxRuntime.jsx)(PollAllOptionsContentOverride, {}) : (0, _jsxRuntime.jsx)(PollAllOptionsContent, {
      additionalScrollViewProps: additionalScrollViewProps
    })
  });
};
var PollOption = exports.PollOption = function PollOption(_ref3) {
  var option = _ref3.option,
    _ref3$showProgressBar = _ref3.showProgressBar,
    showProgressBar = _ref3$showProgressBar === void 0 ? true : _ref3$showProgressBar;
  var _usePollState2 = (0, _usePollState4.usePollState)(),
    isClosed = _usePollState2.isClosed,
    latestVotesByOption = _usePollState2.latestVotesByOption,
    maxVotedOptionIds = _usePollState2.maxVotedOptionIds,
    voteCountsByOption = _usePollState2.voteCountsByOption;
  var relevantVotes = (0, _react.useMemo)(function () {
    var _latestVotesByOption$;
    return (latestVotesByOption == null || (_latestVotesByOption$ = latestVotesByOption[option.id]) == null ? void 0 : _latestVotesByOption$.slice(0, 2)) || [];
  }, [latestVotesByOption, option.id]);
  var maxVotes = (0, _react.useMemo)(function () {
    return maxVotedOptionIds != null && maxVotedOptionIds[0] && voteCountsByOption ? voteCountsByOption[maxVotedOptionIds[0]] : 0;
  }, [maxVotedOptionIds, voteCountsByOption]);
  var votes = voteCountsByOption[option.id] || 0;
  var _useTheme2 = (0, _contexts.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    _useTheme2$theme$colo = _useTheme2$theme.colors,
    accent_dark_blue = _useTheme2$theme$colo.accent_dark_blue,
    accent_info = _useTheme2$theme$colo.accent_info,
    black = _useTheme2$theme$colo.black,
    grey = _useTheme2$theme$colo.grey,
    _useTheme2$theme$poll = _useTheme2$theme.poll.message.option,
    container = _useTheme2$theme$poll.container,
    progressBar = _useTheme2$theme$poll.progressBar,
    progressBarEmptyFill = _useTheme2$theme$poll.progressBarEmptyFill,
    progressBarVotedFill = _useTheme2$theme$poll.progressBarVotedFill,
    progressBarWinnerFill = _useTheme2$theme$poll.progressBarWinnerFill,
    text = _useTheme2$theme$poll.text,
    votesContainer = _useTheme2$theme$poll.votesContainer,
    wrapper = _useTheme2$theme$poll.wrapper;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.wrapper, wrapper],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, container],
      children: [(0, _jsxRuntime.jsx)(VoteButton, {
        option: option
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.text, {
          color: black
        }, text],
        children: option.text
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.votesContainer, votesContainer],
        children: [relevantVotes.map(function (vote) {
          var _vote$user;
          return (0, _jsxRuntime.jsx)(_Avatar.Avatar, {
            image: (_vote$user = vote.user) == null ? void 0 : _vote$user.image,
            size: 20
          }, vote.id);
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: black,
            marginLeft: 2
          },
          children: voteCountsByOption[option.id] || 0
        })]
      })]
    }), showProgressBar ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.progressBar, progressBar],
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          backgroundColor: isClosed && maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === option.id ? progressBarWinnerFill || accent_info : progressBarVotedFill || accent_dark_blue,
          flex: maxVotes > 0 ? votes / maxVotes : 0
        }
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          backgroundColor: progressBarEmptyFill || grey,
          flex: maxVotes > 0 ? (maxVotes - votes) / maxVotes : 1
        }
      })]
    }) : null]
  });
};
var VoteButton = exports.VoteButton = function VoteButton(_ref4) {
  var onPress = _ref4.onPress,
    option = _ref4.option;
  var _usePollContext = (0, _contexts.usePollContext)(),
    message = _usePollContext.message,
    poll = _usePollContext.poll;
  var _usePollState3 = (0, _usePollState4.usePollState)(),
    isClosed = _usePollState3.isClosed,
    ownVotesByOptionId = _usePollState3.ownVotesByOptionId;
  var ownCapabilities = (0, _contexts.useOwnCapabilitiesContext)();
  var _useTheme3 = (0, _contexts.useTheme)(),
    _useTheme3$theme = _useTheme3.theme,
    _useTheme3$theme$colo = _useTheme3$theme.colors,
    accent_dark_blue = _useTheme3$theme$colo.accent_dark_blue,
    disabled = _useTheme3$theme$colo.disabled,
    _useTheme3$theme$poll = _useTheme3$theme.poll.message.option,
    voteButtonActive = _useTheme3$theme$poll.voteButtonActive,
    voteButtonContainer = _useTheme3$theme$poll.voteButtonContainer,
    voteButtonInactive = _useTheme3$theme$poll.voteButtonInactive;
  var toggleVote = (0, _react.useCallback)((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
    var _ownVotesByOptionId$o;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!ownVotesByOptionId[option.id]) {
            _context.next = 5;
            break;
          }
          _context.next = 3;
          return poll.removeVote((_ownVotesByOptionId$o = ownVotesByOptionId[option.id]) == null ? void 0 : _ownVotesByOptionId$o.id, message.id);
        case 3:
          _context.next = 7;
          break;
        case 5:
          _context.next = 7;
          return poll.castVote(option.id, message.id);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })), [message.id, option.id, ownVotesByOptionId, poll]);
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    toggleVote();
  }, [message, onPress, poll, toggleVote]);
  return ownCapabilities.castPollVote && !isClosed ? (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
    onPress: onPressHandler,
    style: function style(_ref6) {
      var pressed = _ref6.pressed;
      return [{
        opacity: pressed ? 0.5 : 1
      }, styles.voteContainer, {
        backgroundColor: ownVotesByOptionId[option.id] ? voteButtonActive || accent_dark_blue : 'transparent',
        borderColor: ownVotesByOptionId[option.id] ? voteButtonActive || accent_dark_blue : voteButtonInactive || disabled
      }, voteButtonContainer];
    },
    children: ownVotesByOptionId[option.id] ? (0, _jsxRuntime.jsx)(_icons.Check, {
      height: 15,
      pathFill: "white",
      width: 20
    }) : null
  }) : null;
};
var styles = _reactNative.StyleSheet.create({
  allOptionsListContainer: {
    borderRadius: 12,
    marginTop: 32,
    paddingBottom: 18,
    paddingHorizontal: 16
  },
  allOptionsTitleContainer: {
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  allOptionsTitleText: {
    fontSize: 16,
    fontWeight: '500'
  },
  allOptionsWrapper: {
    flex: 1,
    marginBottom: 16,
    padding: 16
  },
  container: {
    flexDirection: 'row'
  },
  progressBar: {
    borderRadius: 4,
    flex: 1,
    flexDirection: 'row',
    height: 4,
    marginTop: 2
  },
  text: {
    flex: 1,
    fontSize: 16,
    marginLeft: 4
  },
  voteContainer: {
    alignItems: 'center',
    borderRadius: 18,
    borderWidth: 1,
    height: 18,
    justifyContent: 'center',
    width: 18
  },
  votesContainer: {
    flexDirection: 'row',
    marginLeft: 4
  },
  wrapper: {
    marginTop: 8,
    paddingVertical: 8
  }
});
//# sourceMappingURL=PollOption.js.map