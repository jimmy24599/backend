var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChannelMessageDataState = exports.useChannelDataState = exports.channelInitialState = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var channelInitialState = exports.channelInitialState = {
  hasMore: true,
  hasMoreNewer: false,
  loading: false,
  loadingMore: false,
  loadingMoreRecent: false,
  members: {},
  messages: [],
  pinnedMessages: [],
  read: {},
  targetedMessageId: undefined,
  typing: {},
  watcherCount: 0,
  watchers: {}
};
var useChannelMessageDataState = exports.useChannelMessageDataState = function useChannelMessageDataState(channel) {
  var _channel$state, _channel$state2;
  var _useState = (0, _react.useState)({
      hasMore: true,
      hasMoreNewer: false,
      loading: false,
      loadingMore: false,
      loadingMoreRecent: false,
      messages: (channel == null || (_channel$state = channel.state) == null ? void 0 : _channel$state.messages) || [],
      pinnedMessages: (channel == null || (_channel$state2 = channel.state) == null ? void 0 : _channel$state2.pinnedMessages) || [],
      targetedMessageId: undefined
    }),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var copyMessagesStateFromChannel = (0, _react.useCallback)(function (channel) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        messages: (0, _toConsumableArray2["default"])(channel.state.messages),
        pinnedMessages: (0, _toConsumableArray2["default"])(channel.state.pinnedMessages)
      });
    });
  }, []);
  var loadInitialMessagesStateFromChannel = (0, _react.useCallback)(function (channel, hasMore) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        hasMore: hasMore,
        loading: false,
        messages: (0, _toConsumableArray2["default"])(channel.state.messages),
        pinnedMessages: (0, _toConsumableArray2["default"])(channel.state.pinnedMessages)
      });
    });
  }, []);
  var jumpToLatestMessage = (0, _react.useCallback)(function () {
    setState(function (prev) {
      return Object.assign({}, prev, {
        hasMoreNewer: false,
        loading: false,
        targetedMessageId: undefined
      });
    });
  }, []);
  var jumpToMessageFinished = (0, _react.useCallback)(function (hasMoreNewer, targetedMessageId) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        hasMoreNewer: hasMoreNewer,
        loading: false,
        targetedMessageId: targetedMessageId
      });
    });
  }, []);
  var loadMoreFinished = (0, _react.useCallback)(function (hasMore, messages) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        hasMore: hasMore,
        loadingMore: false,
        messages: messages
      });
    });
  }, []);
  var setLoadingMore = (0, _react.useCallback)(function (loadingMore) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        loadingMore: loadingMore
      });
    });
  }, []);
  var setLoadingMoreRecent = (0, _react.useCallback)(function (loadingMoreRecent) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        loadingMoreRecent: loadingMoreRecent
      });
    });
  }, []);
  var setLoading = (0, _react.useCallback)(function (loading) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        loading: loading
      });
    });
  }, []);
  var loadMoreRecentFinished = (0, _react.useCallback)(function (hasMoreNewer, messages) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        hasMoreNewer: hasMoreNewer,
        loadingMoreRecent: false,
        messages: messages
      });
    });
  }, []);
  return {
    copyMessagesStateFromChannel: copyMessagesStateFromChannel,
    jumpToLatestMessage: jumpToLatestMessage,
    jumpToMessageFinished: jumpToMessageFinished,
    loadInitialMessagesStateFromChannel: loadInitialMessagesStateFromChannel,
    loadMoreFinished: loadMoreFinished,
    loadMoreRecentFinished: loadMoreRecentFinished,
    setLoading: setLoading,
    setLoadingMore: setLoadingMore,
    setLoadingMoreRecent: setLoadingMoreRecent,
    state: state
  };
};
var useChannelDataState = exports.useChannelDataState = function useChannelDataState(channel) {
  var _useState3 = (0, _react.useState)({
      members: channel.state.members,
      read: channel.state.read,
      typing: {},
      watcherCount: 0,
      watchers: {}
    }),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    state = _useState4[0],
    setState = _useState4[1];
  var initStateFromChannel = (0, _react.useCallback)(function (channel) {
    setState(Object.assign({}, state, {
      members: Object.assign({}, channel.state.members),
      read: Object.assign({}, channel.state.read),
      typing: Object.assign({}, channel.state.typing),
      watcherCount: channel.state.watcher_count,
      watchers: Object.assign({}, channel.state.watchers)
    }));
  }, [state]);
  var copyStateFromChannel = (0, _react.useCallback)(function (channel) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        members: Object.assign({}, channel.state.members),
        read: Object.assign({}, channel.state.read),
        watcherCount: channel.state.watcher_count,
        watchers: Object.assign({}, channel.state.watchers)
      });
    });
  }, []);
  var setRead = (0, _react.useCallback)(function (channel) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        read: Object.assign({}, channel.state.read)
      });
    });
  }, []);
  var setTyping = (0, _react.useCallback)(function (channel) {
    setState(function (prev) {
      return Object.assign({}, prev, {
        typing: Object.assign({}, channel.state.typing)
      });
    });
  }, []);
  return {
    copyStateFromChannel: copyStateFromChannel,
    initStateFromChannel: initStateFromChannel,
    setRead: setRead,
    setTyping: setTyping,
    state: state
  };
};
//# sourceMappingURL=useChannelDataState.js.map