var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BottomSheetModal = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = require("react-native-reanimated");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/UIComponents/BottomSheetModal.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var BottomSheetModal = exports.BottomSheetModal = function BottomSheetModal(props) {
  var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),
    windowHeight = _useWindowDimensions.height,
    windowWidth = _useWindowDimensions.width;
  var children = props.children,
    _props$height = props.height,
    height = _props$height === void 0 ? windowHeight / 2 : _props$height,
    onClose = props.onClose,
    visible = props.visible;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$botto = _useTheme$theme.bottomSheetModal,
    container = _useTheme$theme$botto.container,
    contentContainer = _useTheme$theme$botto.contentContainer,
    handle = _useTheme$theme$botto.handle,
    overlayTheme = _useTheme$theme$botto.overlay,
    wrapper = _useTheme$theme$botto.wrapper,
    _useTheme$theme$color = _useTheme$theme.colors,
    grey = _useTheme$theme$color.grey,
    overlay = _useTheme$theme$color.overlay,
    white_snow = _useTheme$theme$color.white_snow;
  var translateY = new _reactNative.Animated.Value(height);
  var openAnimation = _reactNative.Animated.timing(translateY, {
    duration: 200,
    toValue: 0,
    useNativeDriver: true
  });
  var closeAnimation = _reactNative.Animated.timing(translateY, {
    duration: 50,
    toValue: height,
    useNativeDriver: true
  });
  var handleDismiss = function handleDismiss() {
    closeAnimation.start(function () {
      return onClose();
    });
  };
  (0, _react.useEffect)(function () {
    if (visible) {
      openAnimation.start();
    }
  }, [visible, openAnimation]);
  (0, _react.useEffect)(function () {
    var keyboardDidShowListener = _reactNative.Keyboard.addListener('keyboardDidShow', keyboardDidShow);
    var keyboardDidHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', keyboardDidHide);
    return function () {
      keyboardDidShowListener.remove();
      keyboardDidHideListener.remove();
    };
  }, []);
  var keyboardDidShow = function keyboardDidShow(event) {
    _reactNative.Animated.timing(translateY, {
      duration: 250,
      toValue: -event.endCoordinates.height,
      useNativeDriver: true
    }).start();
  };
  var keyboardDidHide = function keyboardDidHide() {
    _reactNative.Animated.timing(translateY, {
      duration: 250,
      toValue: 0,
      useNativeDriver: true
    }).start();
  };
  var handleUpdate = function handleUpdate(event) {
    var translationY = Math.max(event.translationY, 0);
    translateY.setValue(translationY);
  };
  var gesture = _reactNativeGestureHandler.Gesture.Pan().onUpdate(function (event) {
    (0, _reactNativeReanimated.runOnJS)(handleUpdate)(event);
  }).onEnd(function (event) {
    if (event.velocityY > 500 || event.translationY > height / 2) {
      (0, _reactNativeReanimated.runOnJS)(handleDismiss)();
    } else {
      (0, _reactNativeReanimated.runOnJS)(openAnimation.start)();
    }
  });
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.wrapper, wrapper],
    children: (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      onRequestClose: onClose,
      transparent: true,
      visible: visible,
      children: (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureHandlerRootView, {
        style: {
          flex: 1
        },
        children: (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
          gesture: gesture,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [styles.overlay, {
              backgroundColor: overlay
            }, overlayTheme],
            children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
              onPress: onClose,
              style: {
                flex: 1
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: {
                  flex: 1
                }
              })
            }), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
              style: [styles.container, {
                backgroundColor: white_snow,
                height: height,
                transform: [{
                  translateY: translateY
                }]
              }, container],
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.handle, {
                  backgroundColor: grey,
                  width: windowWidth / 4
                }, handle]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.contentContainer, contentContainer],
                children: children
              })]
            })]
          })
        })
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16
  },
  content: {
    flex: 1,
    padding: 16
  },
  contentContainer: {
    flex: 1,
    marginTop: 8
  },
  handle: {
    alignSelf: 'center',
    borderRadius: 4,
    height: 4,
    marginVertical: 8
  },
  overlay: {
    flex: 1,
    justifyContent: 'flex-end'
  },
  wrapper: {
    alignItems: 'center',
    flex: 1,
    justifyContent: 'center'
  }
});
//# sourceMappingURL=BottomSheetModal.js.map