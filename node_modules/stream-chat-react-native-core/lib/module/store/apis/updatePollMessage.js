var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePollMessage = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _streamChat = require("stream-chat");
var _mapPollToStorable = require("../mappers/mapPollToStorable");
var _mapStorableToPoll = require("../mappers/mapStorableToPoll");
var _createSelectQuery = require("../sqlite-utils/createSelectQuery");
var _createUpdateQuery = require("../sqlite-utils/createUpdateQuery");
var _SqliteClient = require("../SqliteClient");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var updatePollMessage = exports.updatePollMessage = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
    var eventType, _ref$flush, flush, poll, poll_vote, userID, queries, pollsFromDB, _iterator, _step, _poll_vote$user, pollFromDB, serializedPoll, _serializedPoll$lates, latest_answers, _serializedPoll$own_v, own_votes, newOwnVotes, newLatestAnswers, storablePoll;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          eventType = _ref.eventType, _ref$flush = _ref.flush, flush = _ref$flush === void 0 ? true : _ref$flush, poll = _ref.poll, poll_vote = _ref.poll_vote, userID = _ref.userID;
          queries = [];
          _context.next = 4;
          return _SqliteClient.SqliteClient.executeSql.apply(null, (0, _createSelectQuery.createSelectQuery)('poll', ['*'], {
            id: poll.id
          }));
        case 4:
          pollsFromDB = _context.sent;
          _iterator = _createForOfIteratorHelper(pollsFromDB);
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              pollFromDB = _step.value;
              serializedPoll = (0, _mapStorableToPoll.mapStorableToPoll)(pollFromDB);
              _serializedPoll$lates = serializedPoll.latest_answers, latest_answers = _serializedPoll$lates === void 0 ? [] : _serializedPoll$lates, _serializedPoll$own_v = serializedPoll.own_votes, own_votes = _serializedPoll$own_v === void 0 ? [] : _serializedPoll$own_v;
              newOwnVotes = own_votes;
              if (poll_vote && ((_poll_vote$user = poll_vote.user) == null ? void 0 : _poll_vote$user.id) === userID) {
                newOwnVotes = eventType === 'poll.vote_removed' ? newOwnVotes.filter(function (vote) {
                  return vote.id !== poll_vote.id;
                }) : [poll_vote].concat((0, _toConsumableArray2["default"])(newOwnVotes.filter(function (vote) {
                  return vote.id !== poll_vote.id;
                })));
              }
              newLatestAnswers = latest_answers;
              if (poll_vote && (0, _streamChat.isVoteAnswer)(poll_vote)) {
                newLatestAnswers = eventType === 'poll.vote_removed' ? newLatestAnswers.filter(function (answer) {
                  return answer.id !== (poll_vote == null ? void 0 : poll_vote.id);
                }) : [poll_vote].concat((0, _toConsumableArray2["default"])(newLatestAnswers.filter(function (answer) {
                  return answer.id !== (poll_vote == null ? void 0 : poll_vote.id);
                })));
              }
              storablePoll = (0, _mapPollToStorable.mapPollToStorable)(Object.assign({}, poll, {
                latest_answers: newLatestAnswers,
                own_votes: newOwnVotes
              }));
              queries.push((0, _createUpdateQuery.createUpdateQuery)('poll', storablePoll, {
                id: poll.id
              }));
              _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'updatePoll', {
                poll: storablePoll
              });
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          if (flush) {
            _SqliteClient.SqliteClient.executeSqlBatch(queries);
          }
          return _context.abrupt("return", queries);
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function updatePollMessage(_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=updatePollMessage.js.map