var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getReads = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _selectReadsForChannels = require("./queries/selectReadsForChannels");
var _mapStorableToRead = require("../mappers/mapStorableToRead");
var _SqliteClient = require("../SqliteClient");
var getReads = exports.getReads = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
    var channelIds, reads, cidVsReads;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          channelIds = _ref.channelIds;
          _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'getReads', {
            channelIds: channelIds
          });
          _context.next = 4;
          return (0, _selectReadsForChannels.selectReadsForChannels)(channelIds);
        case 4:
          reads = _context.sent;
          cidVsReads = {};
          reads.forEach(function (read) {
            if (!cidVsReads[read.cid]) {
              cidVsReads[read.cid] = [];
            }
            cidVsReads[read.cid].push((0, _mapStorableToRead.mapStorableToRead)(read));
          });
          return _context.abrupt("return", cidVsReads);
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getReads(_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=getReads.js.map