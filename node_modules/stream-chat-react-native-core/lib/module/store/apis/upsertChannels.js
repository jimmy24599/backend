var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upsertChannels = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _upsertCidsForQuery = require("./upsertCidsForQuery");
var _upsertMembers = require("./upsertMembers");
var _upsertMessages = require("./upsertMessages");
var _upsertReads = require("./upsertReads");
var _mapChannelDataToStorable = require("../mappers/mapChannelDataToStorable");
var _createUpsertQuery = require("../sqlite-utils/createUpsertQuery");
var _SqliteClient = require("../SqliteClient");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var upsertChannels = exports.upsertChannels = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
    var channels, filters, _ref$flush, flush, isLatestMessagesSet, sort, queries, channelIds, _iterator, _step, channel, members, messages, read;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          channels = _ref.channels, filters = _ref.filters, _ref$flush = _ref.flush, flush = _ref$flush === void 0 ? true : _ref$flush, isLatestMessagesSet = _ref.isLatestMessagesSet, sort = _ref.sort;
          queries = [];
          channelIds = channels.map(function (channel) {
            return channel.channel.cid;
          });
          _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'upsertChannels', {
            channelIds: channelIds
          });
          if (!(filters || sort)) {
            _context.next = 10;
            break;
          }
          _context.t0 = queries;
          _context.next = 8;
          return (0, _upsertCidsForQuery.upsertCidsForQuery)({
            cids: channelIds,
            filters: filters,
            flush: false,
            sort: sort
          });
        case 8:
          _context.t1 = _context.sent;
          queries = _context.t0.concat.call(_context.t0, _context.t1);
        case 10:
          _iterator = _createForOfIteratorHelper(channels);
          _context.prev = 11;
          _iterator.s();
        case 13:
          if ((_step = _iterator.n()).done) {
            _context.next = 36;
            break;
          }
          channel = _step.value;
          queries.push((0, _createUpsertQuery.createUpsertQuery)('channels', (0, _mapChannelDataToStorable.mapChannelDataToStorable)(channel.channel)));
          members = channel.members, messages = channel.messages, read = channel.read;
          _context.t2 = queries;
          _context.next = 20;
          return (0, _upsertMembers.upsertMembers)({
            cid: channel.channel.cid,
            flush: false,
            members: members
          });
        case 20:
          _context.t3 = _context.sent;
          queries = _context.t2.concat.call(_context.t2, _context.t3);
          if (!read) {
            _context.next = 28;
            break;
          }
          _context.t4 = queries;
          _context.next = 26;
          return (0, _upsertReads.upsertReads)({
            cid: channel.channel.cid,
            flush: false,
            reads: read
          });
        case 26:
          _context.t5 = _context.sent;
          queries = _context.t4.concat.call(_context.t4, _context.t5);
        case 28:
          if (!isLatestMessagesSet) {
            _context.next = 34;
            break;
          }
          _context.t6 = queries;
          _context.next = 32;
          return (0, _upsertMessages.upsertMessages)({
            flush: false,
            messages: messages
          });
        case 32:
          _context.t7 = _context.sent;
          queries = _context.t6.concat.call(_context.t6, _context.t7);
        case 34:
          _context.next = 13;
          break;
        case 36:
          _context.next = 41;
          break;
        case 38:
          _context.prev = 38;
          _context.t8 = _context["catch"](11);
          _iterator.e(_context.t8);
        case 41:
          _context.prev = 41;
          _iterator.f();
          return _context.finish(41);
        case 44:
          if (!flush) {
            _context.next = 47;
            break;
          }
          _context.next = 47;
          return _SqliteClient.SqliteClient.executeSqlBatch(queries);
        case 47:
          return _context.abrupt("return", queries);
        case 48:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[11, 38, 41, 44]]);
  }));
  return function upsertChannels(_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=upsertChannels.js.map