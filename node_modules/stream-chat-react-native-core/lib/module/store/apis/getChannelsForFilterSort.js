var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChannelsForFilterSort = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _getChannels = require("./getChannels");
var _selectChannelIdsForFilterSort = require("./queries/selectChannelIdsForFilterSort");
var _SqliteClient = require("../SqliteClient");
var getChannelsForFilterSort = exports.getChannelsForFilterSort = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
    var currentUserId, filters, sort, channelIds;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          currentUserId = _ref.currentUserId, filters = _ref.filters, sort = _ref.sort;
          if (!(!filters && !sort)) {
            _context.next = 4;
            break;
          }
          console.warn('Please provide the query (filters/sort) to fetch channels from DB');
          return _context.abrupt("return", null);
        case 4:
          _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'getChannelsForFilterSort', {
            filters: filters,
            sort: sort
          });
          _context.next = 7;
          return (0, _selectChannelIdsForFilterSort.selectChannelIdsForFilterSort)({
            filters: filters,
            sort: sort
          });
        case 7:
          channelIds = _context.sent;
          if (channelIds) {
            _context.next = 10;
            break;
          }
          return _context.abrupt("return", null);
        case 10:
          if (!(channelIds.length === 0)) {
            _context.next = 12;
            break;
          }
          return _context.abrupt("return", []);
        case 12:
          _context.next = 14;
          return (0, _getChannels.getChannels)({
            channelIds: channelIds,
            currentUserId: currentUserId
          });
        case 14:
          return _context.abrupt("return", _context.sent);
        case 15:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getChannelsForFilterSort(_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=getChannelsForFilterSort.js.map