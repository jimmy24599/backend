var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upsertChannelDataFromChannel = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mapChannelToStorable = require("../mappers/mapChannelToStorable");
var _createUpsertQuery = require("../sqlite-utils/createUpsertQuery");
var _SqliteClient = require("../SqliteClient");
var upsertChannelDataFromChannel = exports.upsertChannelDataFromChannel = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
    var channel, _ref$flush, flush, storableChannel, query;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          channel = _ref.channel, _ref$flush = _ref.flush, flush = _ref$flush === void 0 ? true : _ref$flush;
          storableChannel = (0, _mapChannelToStorable.mapChannelToStorable)(channel);
          if (storableChannel) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return");
        case 4:
          query = (0, _createUpsertQuery.createUpsertQuery)('channels', storableChannel);
          if (!flush) {
            _context.next = 8;
            break;
          }
          _context.next = 8;
          return _SqliteClient.SqliteClient.executeSqlBatch([query]);
        case 8:
          return _context.abrupt("return", [query]);
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function upsertChannelDataFromChannel(_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=upsertChannelDataFromChannel.js.map