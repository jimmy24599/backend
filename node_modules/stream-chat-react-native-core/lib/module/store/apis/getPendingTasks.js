var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPendingTasks = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mapStorableToTask = require("../mappers/mapStorableToTask");
var _createSelectQuery = require("../sqlite-utils/createSelectQuery");
var _SqliteClient = require("../SqliteClient");
var getPendingTasks = exports.getPendingTasks = function () {
  var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
    var conditions,
      query,
      result,
      _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          conditions = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          query = (0, _createSelectQuery.createSelectQuery)('pendingTasks', ['*'], conditions, {
            createdAt: 1
          });
          _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'getPendingTasks', {
            conditions: conditions
          });
          _context.next = 5;
          return _SqliteClient.SqliteClient.executeSql.apply(null, query);
        case 5:
          result = _context.sent;
          return _context.abrupt("return", result.map(function (r) {
            return (0, _mapStorableToTask.mapStorableToTask)(r);
          }));
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getPendingTasks() {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=getPendingTasks.js.map