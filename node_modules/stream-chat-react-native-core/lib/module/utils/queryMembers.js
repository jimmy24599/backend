var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryMembersDebounced = exports.getMembersAndWatchers = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _constants = require("./constants");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var getMembers = function getMembers(channel) {
  var members = channel.state.members;
  return members ? Object.values(members).map(function (_ref) {
    var user = _ref.user;
    return user;
  }) : [];
};
var getWatchers = function getWatchers(channel) {
  var watchers = channel.state.watchers;
  return watchers ? Object.values(watchers) : [];
};
var getMembersAndWatchers = exports.getMembersAndWatchers = function getMembersAndWatchers(channel) {
  var members = getMembers(channel);
  var watchers = getWatchers(channel);
  var users = [].concat((0, _toConsumableArray2["default"])(members), (0, _toConsumableArray2["default"])(watchers));
  var seenUsers = new Set();
  var uniqueUsers = [];
  var _iterator = _createForOfIteratorHelper(users),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var user = _step.value;
      if (user && !seenUsers.has(user.id)) {
        uniqueUsers.push(user);
        seenUsers.add(user.id);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return uniqueUsers;
};
var isUserResponse = function isUserResponse(user) {
  return user !== undefined;
};
var queryMembers = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(client, channel, query, onReady) {
    var options,
      _options$limit,
      limit,
      _ref3,
      members,
      users,
      _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};
          if (query) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return");
        case 3:
          _context.prev = 3;
          _options$limit = options.limit, limit = _options$limit === void 0 ? _constants.defaultAutoCompleteSuggestionsLimit : _options$limit;
          _context.next = 7;
          return channel.queryMembers({
            name: {
              $autocomplete: query
            }
          }, {}, {
            limit: limit
          });
        case 7:
          _ref3 = _context.sent;
          members = _ref3.members;
          users = [];
          members.filter(function (member) {
            var _member$user;
            return ((_member$user = member.user) == null ? void 0 : _member$user.id) !== client.userID;
          }).forEach(function (member) {
            return isUserResponse(member.user) && users.push(member.user);
          });
          if (onReady && users) {
            onReady(users);
          }
          _context.next = 18;
          break;
        case 14:
          _context.prev = 14;
          _context.t0 = _context["catch"](3);
          console.warn('Error querying members:', _context.t0);
          throw _context.t0;
        case 18:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[3, 14]]);
  }));
  return function queryMembers(_x, _x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var queryMembersDebounced = exports.queryMembersDebounced = (0, _debounce["default"])(queryMembers, 200, {
  leading: false,
  trailing: true
});
//# sourceMappingURL=queryMembers.js.map