var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DBSyncManager = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _dayjs = _interopRequireDefault(require("dayjs"));
var _handleEventToSyncDB = require("../components/Chat/hooks/handleEventToSyncDB");
var _apis = require("../store/apis");
var _addPendingTask = require("../store/apis/addPendingTask");
var _deletePendingTask = require("../store/apis/deletePendingTask");
var _getPendingTasks = require("../store/apis/getPendingTasks");
var _SqliteClient = require("../store/SqliteClient");
var _DBSyncManager;
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var restBeforeNextTask = function restBeforeNextTask() {
  return new Promise(function (resolve) {
    return setTimeout(resolve, 500);
  });
};
var DBSyncManager = exports.DBSyncManager = (0, _createClass2["default"])(function DBSyncManager() {
  (0, _classCallCheck2["default"])(this, DBSyncManager);
});
_DBSyncManager = DBSyncManager;
DBSyncManager.syncStatus = false;
DBSyncManager.listeners = [];
DBSyncManager.client = null;
DBSyncManager.connectionChangedListener = null;
DBSyncManager.getSyncStatus = function () {
  return _DBSyncManager.syncStatus;
};
DBSyncManager.init = function () {
  var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(client) {
    var _client$user, _client$wsConnection;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _DBSyncManager.client = client;
          if (!((_client$user = client.user) != null && _client$user.id && (_client$wsConnection = client.wsConnection) != null && _client$wsConnection.isHealthy)) {
            _context2.next = 7;
            break;
          }
          _context2.next = 5;
          return _DBSyncManager.syncAndExecutePendingTasks();
        case 5:
          _DBSyncManager.syncStatus = true;
          _DBSyncManager.listeners.forEach(function (l) {
            return l(true);
          });
        case 7:
          if (_DBSyncManager.connectionChangedListener) {
            _DBSyncManager.connectionChangedListener.unsubscribe();
          }
          _DBSyncManager.connectionChangedListener = _DBSyncManager.client.on('connection.changed', function () {
            var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(event) {
              return _regenerator["default"].wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    if (!event.online) {
                      _context.next = 7;
                      break;
                    }
                    _context.next = 3;
                    return _DBSyncManager.syncAndExecutePendingTasks();
                  case 3:
                    _DBSyncManager.syncStatus = true;
                    _DBSyncManager.listeners.forEach(function (l) {
                      return l(true);
                    });
                    _context.next = 9;
                    break;
                  case 7:
                    _DBSyncManager.syncStatus = false;
                    _DBSyncManager.listeners.forEach(function (l) {
                      return l(false);
                    });
                  case 9:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function (_x2) {
              return _ref2.apply(this, arguments);
            };
          }());
          _context2.next = 14;
          break;
        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](0);
          console.log('Error in DBSyncManager.init: ', _context2.t0);
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 11]]);
  }));
  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();
DBSyncManager.onSyncStatusChange = function (listener) {
  _DBSyncManager.listeners.push(listener);
  return {
    unsubscribe: function unsubscribe() {
      _DBSyncManager.listeners = _DBSyncManager.listeners.filter(function (el) {
        return el !== listener;
      });
    }
  };
};
DBSyncManager.sync = function () {
  var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(client) {
    var _DBSyncManager$client;
    var cids, lastSyncedAt, lastSyncedAtDate, lastSyncedAtDayJs, nowDayJs, diff, result, queryPromises, queriesArray, queries;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if ((_DBSyncManager$client = _DBSyncManager.client) != null && _DBSyncManager$client.user) {
            _context4.next = 2;
            break;
          }
          return _context4.abrupt("return");
        case 2:
          _context4.next = 4;
          return (0, _apis.getAllChannelIds)();
        case 4:
          cids = _context4.sent;
          if (!(cids.length === 0)) {
            _context4.next = 7;
            break;
          }
          return _context4.abrupt("return");
        case 7:
          _context4.next = 9;
          return (0, _apis.getLastSyncedAt)({
            currentUserId: _DBSyncManager.client.user.id
          });
        case 9:
          lastSyncedAt = _context4.sent;
          if (!lastSyncedAt) {
            _context4.next = 38;
            break;
          }
          lastSyncedAtDate = new Date(lastSyncedAt);
          lastSyncedAtDayJs = (0, _dayjs["default"])(lastSyncedAtDate);
          nowDayJs = (0, _dayjs["default"])();
          diff = nowDayJs.diff(lastSyncedAtDayJs, 'days');
          if (!(diff > 30)) {
            _context4.next = 20;
            break;
          }
          _context4.next = 18;
          return _SqliteClient.SqliteClient.resetDB();
        case 18:
          _context4.next = 38;
          break;
        case 20:
          _context4.prev = 20;
          _context4.next = 23;
          return _DBSyncManager.client.sync(cids, lastSyncedAtDate.toISOString());
        case 23:
          result = _context4.sent;
          queryPromises = result.events.map(function () {
            var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(event) {
              return _regenerator["default"].wrap(function _callee3$(_context3) {
                while (1) switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return (0, _handleEventToSyncDB.handleEventToSyncDB)(event, client);
                  case 2:
                    return _context3.abrupt("return", _context3.sent);
                  case 3:
                  case "end":
                    return _context3.stop();
                }
              }, _callee3);
            }));
            return function (_x4) {
              return _ref4.apply(this, arguments);
            };
          }());
          _context4.next = 27;
          return Promise.all(queryPromises);
        case 27:
          queriesArray = _context4.sent;
          queries = queriesArray.flat();
          if (!queries.length) {
            _context4.next = 32;
            break;
          }
          _context4.next = 32;
          return _SqliteClient.SqliteClient.executeSqlBatch(queries);
        case 32:
          _context4.next = 38;
          break;
        case 34:
          _context4.prev = 34;
          _context4.t0 = _context4["catch"](20);
          _context4.next = 38;
          return _SqliteClient.SqliteClient.resetDB();
        case 38:
          _context4.next = 40;
          return (0, _apis.upsertUserSyncStatus)({
            currentUserId: _DBSyncManager.client.user.id,
            lastSyncedAt: new Date().toString()
          });
        case 40:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[20, 34]]);
  }));
  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}();
DBSyncManager.syncAndExecutePendingTasks = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {
  return _regenerator["default"].wrap(function _callee5$(_context5) {
    while (1) switch (_context5.prev = _context5.next) {
      case 0:
        if (_DBSyncManager.client) {
          _context5.next = 2;
          break;
        }
        return _context5.abrupt("return");
      case 2:
        _context5.next = 4;
        return _DBSyncManager.executePendingTasks(_DBSyncManager.client);
      case 4:
        _context5.next = 6;
        return _DBSyncManager.sync(_DBSyncManager.client);
      case 6:
      case "end":
        return _context5.stop();
    }
  }, _callee5);
}));
DBSyncManager.queueTask = function () {
  var _ref7 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(_ref6) {
    var client, task, removeFromApi, response, _response;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          client = _ref6.client, task = _ref6.task;
          _context6.next = 3;
          return (0, _addPendingTask.addPendingTask)(task);
        case 3:
          removeFromApi = _context6.sent;
          _context6.prev = 4;
          _context6.next = 7;
          return _DBSyncManager.executeTask({
            client: client,
            task: task
          });
        case 7:
          response = _context6.sent;
          _context6.next = 16;
          break;
        case 10:
          _context6.prev = 10;
          _context6.t0 = _context6["catch"](4);
          if (!((_context6.t0 == null || (_response = _context6.t0.response) == null || (_response = _response.data) == null ? void 0 : _response.code) === 4)) {
            _context6.next = 15;
            break;
          }
          _context6.next = 16;
          break;
        case 15:
          throw _context6.t0;
        case 16:
          _context6.next = 18;
          return removeFromApi();
        case 18:
          return _context6.abrupt("return", response);
        case 19:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[4, 10]]);
  }));
  return function (_x5) {
    return _ref7.apply(this, arguments);
  };
}();
DBSyncManager.executeTask = function () {
  var _ref9 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(_ref8) {
    var client, task, channel;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          client = _ref8.client, task = _ref8.task;
          channel = client.channel(task.channelType, task.channelId);
          if (!(task.type === 'send-reaction')) {
            _context7.next = 6;
            break;
          }
          _context7.next = 5;
          return channel.sendReaction.apply(channel, (0, _toConsumableArray2["default"])(task.payload));
        case 5:
          return _context7.abrupt("return", _context7.sent);
        case 6:
          if (!(task.type === 'delete-reaction')) {
            _context7.next = 10;
            break;
          }
          _context7.next = 9;
          return channel.deleteReaction.apply(channel, (0, _toConsumableArray2["default"])(task.payload));
        case 9:
          return _context7.abrupt("return", _context7.sent);
        case 10:
          if (!(task.type === 'delete-message')) {
            _context7.next = 14;
            break;
          }
          _context7.next = 13;
          return client.deleteMessage.apply(client, (0, _toConsumableArray2["default"])(task.payload));
        case 13:
          return _context7.abrupt("return", _context7.sent);
        case 14:
          throw new Error('Invalid task type');
        case 15:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return function (_x6) {
    return _ref9.apply(this, arguments);
  };
}();
DBSyncManager.executePendingTasks = function () {
  var _ref10 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(client) {
    var queue, _iterator, _step, task, _response2;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.next = 2;
          return (0, _getPendingTasks.getPendingTasks)();
        case 2:
          queue = _context8.sent;
          _iterator = _createForOfIteratorHelper(queue);
          _context8.prev = 4;
          _iterator.s();
        case 6:
          if ((_step = _iterator.n()).done) {
            _context8.next = 27;
            break;
          }
          task = _step.value;
          if (task.id) {
            _context8.next = 10;
            break;
          }
          return _context8.abrupt("continue", 25);
        case 10:
          _context8.prev = 10;
          _context8.next = 13;
          return _DBSyncManager.executeTask({
            client: client,
            task: task
          });
        case 13:
          _context8.next = 21;
          break;
        case 15:
          _context8.prev = 15;
          _context8.t0 = _context8["catch"](10);
          if (!((_context8.t0 == null || (_response2 = _context8.t0.response) == null || (_response2 = _response2.data) == null ? void 0 : _response2.code) === 4)) {
            _context8.next = 20;
            break;
          }
          _context8.next = 21;
          break;
        case 20:
          throw _context8.t0;
        case 21:
          _context8.next = 23;
          return (0, _deletePendingTask.deletePendingTask)({
            id: task.id
          });
        case 23:
          _context8.next = 25;
          return restBeforeNextTask();
        case 25:
          _context8.next = 6;
          break;
        case 27:
          _context8.next = 32;
          break;
        case 29:
          _context8.prev = 29;
          _context8.t1 = _context8["catch"](4);
          _iterator.e(_context8.t1);
        case 32:
          _context8.prev = 32;
          _iterator.f();
          return _context8.finish(32);
        case 35:
        case "end":
          return _context8.stop();
      }
    }, _callee8, null, [[4, 29, 32, 35], [10, 15]]);
  }));
  return function (_x7) {
    return _ref10.apply(this, arguments);
  };
}();
DBSyncManager.dropPendingTasks = function () {
  var _ref11 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(conditions) {
    var tasks, _iterator2, _step2, task;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return (0, _getPendingTasks.getPendingTasks)(conditions);
        case 2:
          tasks = _context9.sent;
          _iterator2 = _createForOfIteratorHelper(tasks);
          _context9.prev = 4;
          _iterator2.s();
        case 6:
          if ((_step2 = _iterator2.n()).done) {
            _context9.next = 14;
            break;
          }
          task = _step2.value;
          if (task.id) {
            _context9.next = 10;
            break;
          }
          return _context9.abrupt("continue", 12);
        case 10:
          _context9.next = 12;
          return (0, _deletePendingTask.deletePendingTask)({
            id: task.id
          });
        case 12:
          _context9.next = 6;
          break;
        case 14:
          _context9.next = 19;
          break;
        case 16:
          _context9.prev = 16;
          _context9.t0 = _context9["catch"](4);
          _iterator2.e(_context9.t0);
        case 19:
          _context9.prev = 19;
          _iterator2.f();
          return _context9.finish(19);
        case 22:
        case "end":
          return _context9.stop();
      }
    }, _callee9, null, [[4, 16, 19, 22]]);
  }));
  return function (_x8) {
    return _ref11.apply(this, arguments);
  };
}();
//# sourceMappingURL=DBSyncManager.js.map