var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqliteMock = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _betterSqlite = _interopRequireDefault(require("better-sqlite3"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var db;
var sqliteMock = exports.sqliteMock = {
  open: function open() {
    db = new _betterSqlite["default"]('foobar.db');
    return {
      close: function close() {
        db.close();
        return {
          message: '',
          status: 0
        };
      },
      execute: function () {
        var _execute = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(queryInput, params) {
          var query, stmt, result, modifiedParams, pragmaQueryTokens;
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                query = queryInput.trim().toLowerCase();
                stmt = db.prepare(query);
                result = [];
                if (!(query.indexOf('select') === 0)) {
                  _context.next = 9;
                  break;
                }
                modifiedParams = (params == null ? void 0 : params.map(function (p) {
                  return typeof p === 'boolean' ? Number(p) : p;
                })) || [];
                _context.next = 7;
                return new Promise(function (resolve) {
                  return resolve(stmt.all(modifiedParams));
                });
              case 7:
                result = _context.sent;
                return _context.abrupt("return", {
                  message: '',
                  rows: result,
                  status: 0
                });
              case 9:
                if (!(query.indexOf('pragma') === 0)) {
                  _context.next = 13;
                  break;
                }
                pragmaQueryTokens = query.split(' ');
                if (pragmaQueryTokens[2] === '=') {
                  db.pragma("".concat(pragmaQueryTokens[1], " = ").concat(pragmaQueryTokens[3]));
                } else {
                  result = db.pragma("".concat(pragmaQueryTokens[1]));
                }
                return _context.abrupt("return", {
                  message: '',
                  rows: result,
                  status: 0
                });
              case 13:
                _context.next = 15;
                return new Promise(function (resolve) {
                  if (params) {
                    var _modifiedParams = params.map(function (p) {
                      return typeof p === 'boolean' ? Number(p) : p;
                    });
                    stmt.run(_modifiedParams);
                  } else {
                    stmt.run();
                  }
                  resolve(undefined);
                });
              case 15:
                return _context.abrupt("return", {
                  message: '',
                  rows: result,
                  status: 0
                });
              case 16:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function execute(_x, _x2) {
          return _execute.apply(this, arguments);
        }
        return execute;
      }(),
      executeBatch: function () {
        var _executeBatch = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(queriesArr) {
          var _loop, _iterator, _step, queryAndParams;
          return _regenerator["default"].wrap(function _callee2$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _loop = _regenerator["default"].mark(function _loop() {
                  var query, params, stmt;
                  return _regenerator["default"].wrap(function _loop$(_context2) {
                    while (1) switch (_context2.prev = _context2.next) {
                      case 0:
                        query = queryAndParams[0];
                        params = queryAndParams[1];
                        stmt = db.prepare(query);
                        _context2.next = 5;
                        return new Promise(function (resolve) {
                          if (params) {
                            var modifiedParams = params.map(function (p) {
                              return typeof p === 'boolean' ? Number(p) : p;
                            });
                            stmt.run(modifiedParams);
                          } else {
                            stmt.run();
                          }
                          resolve(undefined);
                        });
                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }, _loop);
                });
                _iterator = _createForOfIteratorHelper(queriesArr);
                _context3.prev = 2;
                _iterator.s();
              case 4:
                if ((_step = _iterator.n()).done) {
                  _context3.next = 9;
                  break;
                }
                queryAndParams = _step.value;
                return _context3.delegateYield(_loop(), "t0", 7);
              case 7:
                _context3.next = 4;
                break;
              case 9:
                _context3.next = 14;
                break;
              case 11:
                _context3.prev = 11;
                _context3.t1 = _context3["catch"](2);
                _iterator.e(_context3.t1);
              case 14:
                _context3.prev = 14;
                _iterator.f();
                return _context3.finish(14);
              case 17:
                return _context3.abrupt("return", {
                  message: '',
                  staus: 0
                });
              case 18:
              case "end":
                return _context3.stop();
            }
          }, _callee2, null, [[2, 11, 14, 17]]);
        }));
        function executeBatch(_x3) {
          return _executeBatch.apply(this, arguments);
        }
        return executeBatch;
      }()
    };
  }
};
//# sourceMappingURL=mock.js.map