import type { DefaultStreamChatGenerics } from '../../../types/types';
import { StreamingMessageViewProps } from '../MessageSimple/StreamingMessageView';
export type UseStreamingMessageProps<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = Pick<StreamingMessageViewProps<StreamChatGenerics>, 'letterInterval' | 'renderingLetterCount'> & {
    text: string;
};
/**
 * A hook that returns text in a streamed, typewriter fashion. The speed of streaming is
 * configurable.
 * @param {number} [letterInterval=0] - The timeout between each typing animation in milliseconds.
 * @param {number} [renderingLetterCount=2] - The number of letters to be rendered each time we update.
 * @param {string} text - The text that we want to render in a typewriter fashion.
 * @returns {{ streamedMessageText: string }} - A substring of the text property, up until we've finished rendering the typewriter animation.
 */
export declare const useStreamingMessage: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ letterInterval, renderingLetterCount, text, }: UseStreamingMessageProps<StreamChatGenerics>) => {
    streamedMessageText: string;
};
//# sourceMappingURL=useStreamingMessage.d.ts.map