import { ComponentType } from 'react';
import { ReactionGroupResponse, ReactionResponse } from 'stream-chat';
import { MessagesContextValue } from '../../../contexts/messagesContext/MessagesContext';
import { DefaultStreamChatGenerics } from '../../../types/types';
export type ReactionSummary = {
    own: boolean;
    type: string;
    count?: number;
    firstReactionAt?: Date | null;
    Icon?: ComponentType | null;
    lastReactionAt?: Date | null;
    latestReactedUserNames?: string[];
    unlistedReactedUserCount?: number;
};
export type ReactionsComparator = (a: ReactionSummary, b: ReactionSummary) => number;
export type MessageReactionsData<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    /** An array of the reaction objects to display in the list */
    latest_reactions?: ReactionResponse<StreamChatGenerics>[];
    /** An array of the own reaction objects to distinguish own reactions visually */
    own_reactions?: ReactionResponse<StreamChatGenerics>[] | null;
    /** An object containing summary for each reaction type on a message */
    reaction_groups?: Record<string, ReactionGroupResponse> | null;
};
type UseProcessReactionsParams<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = MessageReactionsData<StreamChatGenerics> & Partial<Pick<MessagesContextValue<StreamChatGenerics>, 'supportedReactions'>> & {
    sortReactions?: ReactionsComparator;
};
export declare const defaultReactionsSort: ReactionsComparator;
/**
 * Custom hook to process reactions data from message and return a list of reactions with additional info.
 */
export declare const useProcessReactions: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(props: UseProcessReactionsParams<StreamChatGenerics>) => {
    existingReactions: {
        count: number;
        firstReactionAt: Date | null;
        Icon: ComponentType<import("../../..").IconProps> | null | undefined;
        lastReactionAt: Date | null;
        latestReactedUserNames: string[];
        own: boolean;
        type: string;
        unlistedReactedUserCount: number;
    }[];
    hasReactions: boolean;
    totalReactionCount: number;
};
export {};
//# sourceMappingURL=useProcessReactions.d.ts.map