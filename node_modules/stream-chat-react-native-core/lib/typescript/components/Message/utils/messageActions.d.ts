import type { MessageContextValue } from '../../../contexts/messageContext/MessageContext';
import type { OwnCapabilitiesContextValue } from '../../../contexts/ownCapabilitiesContext/OwnCapabilitiesContext';
import type { DefaultStreamChatGenerics } from '../../../types/types';
import type { MessageActionType } from '../../MessageMenu/MessageActionListItem';
export type MessageActionsParams<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    banUser: MessageActionType;
    copyMessage: MessageActionType;
    deleteMessage: MessageActionType;
    dismissOverlay: () => void;
    editMessage: MessageActionType;
    error: boolean | Error;
    flagMessage: MessageActionType;
    isThreadMessage: boolean;
    markUnread: MessageActionType;
    muteUser: MessageActionType;
    ownCapabilities: OwnCapabilitiesContextValue;
    pinMessage: MessageActionType;
    quotedReply: MessageActionType;
    retry: MessageActionType;
    /**
     * Determines if the message actions are visible.
     */
    showMessageReactions: boolean;
    threadReply: MessageActionType;
    unpinMessage: MessageActionType;
} & Pick<MessageContextValue<StreamChatGenerics>, 'message' | 'isMyMessage'>;
export type MessageActionsProp<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = (param: MessageActionsParams<StreamChatGenerics>) => MessageActionType[];
export declare const messageActions: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ banUser, copyMessage, deleteMessage, editMessage, error, flagMessage, isMyMessage, isThreadMessage, markUnread, message, ownCapabilities, pinMessage, quotedReply, retry, showMessageReactions, threadReply, unpinMessage, }: MessageActionsParams<StreamChatGenerics>) => MessageActionType[];
//# sourceMappingURL=messageActions.d.ts.map