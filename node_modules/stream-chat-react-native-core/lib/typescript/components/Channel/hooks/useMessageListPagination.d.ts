import { Channel } from 'stream-chat';
import { DefaultStreamChatGenerics } from '../../../types/types';
/**
 * The useMessageListPagination hook handles pagination for the message list.
 * It provides functionality to load more messages, load more recent messages, load latest messages, and load channel around a specific message.
 *
 * @param channel The channel object for which the message list pagination is being handled.
 */
export declare const useMessageListPagination: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ channel, }: {
    channel: Channel<StreamChatGenerics>;
}) => {
    copyMessagesStateFromChannel: (channel: Channel<StreamChatGenerics>) => void;
    loadChannelAroundMessage: ({ limit, messageId, setTargetedMessage, }: {
        limit?: number;
        messageId?: string;
        setTargetedMessage?: (messageId: string) => void;
    }) => Promise<void>;
    loadChannelAtFirstUnreadMessage: ({ channelUnreadState, limit, setTargetedMessage, }: {
        channelUnreadState?: import("../../../types/types").ChannelUnreadState<StreamChatGenerics> | undefined;
        limit?: number;
        setChannelUnreadState?: import("react").Dispatch<import("react").SetStateAction<import("../../../types/types").ChannelUnreadState<StreamChatGenerics> | undefined>> | undefined;
        setTargetedMessage?: (messageId: string) => void;
    }) => Promise<void>;
    loadInitialMessagesStateFromChannel: (channel: Channel<StreamChatGenerics>, hasMore: boolean) => void;
    loadLatestMessages: () => Promise<void>;
    loadMore: (limit?: number) => Promise<void>;
    loadMoreRecent: (limit?: number) => Promise<void>;
    state: import("./useChannelDataState").ChannelMessagesState<StreamChatGenerics>;
};
//# sourceMappingURL=useMessageListPagination.d.ts.map