import React from 'react';
import { ChannelFilters, ChannelManager, ChannelOptions, ChannelSort } from 'stream-chat';
import type { DefaultStreamChatGenerics } from '../../../types/types';
type Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    channelManager: ChannelManager<StreamChatGenerics>;
    enableOfflineSupport: boolean;
    filters: ChannelFilters<StreamChatGenerics>;
    options: ChannelOptions;
    setForceUpdate: React.Dispatch<React.SetStateAction<number>>;
    sort: ChannelSort<StreamChatGenerics>;
};
type QueryType = 'queryLocalDB' | 'reload' | 'refresh' | 'loadChannels';
export type QueryChannels = (queryType?: QueryType, retryCount?: number) => Promise<void>;
export declare const usePaginatedChannels: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ channelManager, enableOfflineSupport, filters, options, setForceUpdate, sort, }: Parameters<StreamChatGenerics>) => {
    channelListInitialized: boolean;
    channels: import("stream-chat").Channel<StreamChatGenerics>[];
    error: Error | undefined;
    hasNextPage: boolean;
    loadingChannels: boolean;
    loadingNextPage: boolean;
    loadNextPage: () => Promise<void>;
    refreshing: boolean;
    refreshList: () => Promise<void>;
    reloadList: () => Promise<void>;
    staticChannelsActive: boolean;
};
export {};
//# sourceMappingURL=usePaginatedChannels.d.ts.map