import type { DB } from '@op-engineering/op-sqlite';
import { Logger } from 'stream-chat';
import type { PreparedBatchQueries, Scalar } from './types';
/**
 * SqliteClient takes care of any direct interaction with sqlite.
 * This way usage @op-engineering/op-sqlite package is scoped to a single class/file.
 */
export declare class SqliteClient {
    static dbVersion: number;
    static dbName: string;
    static dbLocation: string;
    static logger: Logger | undefined;
    static db: DB | undefined;
    static getDbVersion: () => number;
    static setDbVersion: (version: number) => number;
    static openDB: () => Promise<void>;
    static closeDB: () => void;
    static executeSqlBatch: (queries: PreparedBatchQueries[]) => Promise<void>;
    static executeSql: (query: string, params?: Scalar[]) => Promise<Record<string, string>[]>;
    static dropTables: () => Promise<void>;
    static deleteDatabase: () => boolean;
    static initializeDatabase: () => Promise<void>;
    static updateUserPragmaVersion: (version: number) => Promise<void>;
    static getUserPragmaVersion: () => Promise<number>;
    static resetDB: () => Promise<void>;
}
//# sourceMappingURL=SqliteClient.d.ts.map