import React, { ReactNode } from 'react';
import type { DefaultStreamChatGenerics } from '../../types/types';
import type { ThreadContextValue } from '../threadContext/ThreadContext';
export type ChannelState<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    threadMessages: ThreadContextValue<StreamChatGenerics>['threadMessages'];
};
type ChannelsState<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    [cid: string]: ChannelState<StreamChatGenerics>;
};
export type Keys = keyof ChannelState;
export type Payload<Key extends Keys = Keys, StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    cid: string;
    key: Key;
    value: ChannelState<StreamChatGenerics>[Key];
};
export type ChannelsStateContextValue<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    setState: (value: Payload<Keys, StreamChatGenerics>) => void;
    state: ChannelsState<StreamChatGenerics>;
};
export declare const ChannelsStateProvider: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ children, }: {
    children: ReactNode;
}) => React.JSX.Element;
export declare const useChannelsStateContext: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>() => ChannelsStateContextValue<StreamChatGenerics>;
export {};
//# sourceMappingURL=ChannelsStateContext.d.ts.map