import type { Channel as ChannelType } from 'stream-chat';
import type { ChannelsStateContextValue, ChannelState, Keys } from './ChannelsStateContext';
import type { DefaultStreamChatGenerics } from '../../types/types';
type StateManagerParams<Key extends Keys, StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = ChannelsStateContextValue<StreamChatGenerics> & {
    cid: string;
    key: Key;
};
export declare function useStateManager<Key extends Keys, StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ cid, key, setState, state }: StateManagerParams<Key, StreamChatGenerics>, initialValue?: ChannelState<StreamChatGenerics>[Key]): readonly [ChannelState<StreamChatGenerics>[Key], (value: ChannelState<StreamChatGenerics>[Key]) => void];
export type UseChannelStateValue<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    setThreadMessages: (value: ChannelState<StreamChatGenerics>['threadMessages']) => void;
    threadMessages: ChannelState<StreamChatGenerics>['threadMessages'];
};
export declare function useChannelState<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(channel: ChannelType<StreamChatGenerics> | undefined, threadId?: string): UseChannelStateValue<StreamChatGenerics>;
export {};
//# sourceMappingURL=useChannelState.d.ts.map