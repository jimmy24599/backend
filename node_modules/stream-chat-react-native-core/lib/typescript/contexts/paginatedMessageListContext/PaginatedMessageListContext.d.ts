import React, { PropsWithChildren } from 'react';
import type { ChannelState } from 'stream-chat';
import type { DefaultStreamChatGenerics } from '../../types/types';
export type PaginatedMessageListContextValue<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    /**
     * Load latest messages
     * @returns Promise<void>
     */
    loadLatestMessages: () => Promise<void>;
    /**
     * Load more messages
     */
    loadMore: (limit?: number) => Promise<void>;
    /**
     * Load more recent messages
     */
    loadMoreRecent: (limit?: number) => Promise<void>;
    /**
     * Messages from client state
     */
    messages: ChannelState<StreamChatGenerics>['messages'];
    /**
     * Has more messages to load
     */
    hasMore?: boolean;
    /**
     * Is loading more messages
     */
    loadingMore?: boolean;
    /**
     * Is loading more recent messages
     */
    loadingMoreRecent?: boolean;
    /**
     * Set loadingMore
     */
    setLoadingMore?: (loadingMore: boolean) => void;
    /**
     * Set loadingMoreRecent
     */
    setLoadingMoreRecent?: (loadingMoreRecent: boolean) => void;
};
export declare const PaginatedMessageListContext: React.Context<PaginatedMessageListContextValue<DefaultStreamChatGenerics>>;
export declare const PaginatedMessageListProvider: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ children, value, }: PropsWithChildren<{
    value?: PaginatedMessageListContextValue<StreamChatGenerics>;
}>) => React.JSX.Element;
export declare const usePaginatedMessageListContext: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>() => PaginatedMessageListContextValue<StreamChatGenerics>;
//# sourceMappingURL=PaginatedMessageListContext.d.ts.map