var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAudioPlayer = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("../native");
var useAudioPlayer = exports.useAudioPlayer = function useAudioPlayer(props) {
  var soundRef = props.soundRef;
  var isExpoCLI = _native.NativeHandlers.SDK === 'stream-chat-expo';
  var playAudio = function () {
    var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
      var _soundRef$current, _soundRef$current2;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!isExpoCLI) {
              _context.next = 6;
              break;
            }
            if (!((_soundRef$current = soundRef.current) != null && _soundRef$current.playAsync)) {
              _context.next = 4;
              break;
            }
            _context.next = 4;
            return soundRef.current.playAsync();
          case 4:
            _context.next = 7;
            break;
          case 6:
            if ((_soundRef$current2 = soundRef.current) != null && _soundRef$current2.resume) {
              soundRef.current.resume();
            }
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function playAudio() {
      return _ref.apply(this, arguments);
    };
  }();
  var pauseAudio = function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
      var _soundRef$current3, _soundRef$current4;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!isExpoCLI) {
              _context2.next = 6;
              break;
            }
            if (!((_soundRef$current3 = soundRef.current) != null && _soundRef$current3.pauseAsync)) {
              _context2.next = 4;
              break;
            }
            _context2.next = 4;
            return soundRef.current.pauseAsync();
          case 4:
            _context2.next = 7;
            break;
          case 6:
            if ((_soundRef$current4 = soundRef.current) != null && _soundRef$current4.pause) {
              soundRef.current.pause();
            }
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function pauseAudio() {
      return _ref2.apply(this, arguments);
    };
  }();
  var seekAudio = function () {
    var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(currentTime) {
      var _soundRef$current5, _soundRef$current6, _soundRef$current7;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!isExpoCLI) {
              _context3.next = 12;
              break;
            }
            if (!(currentTime === 0)) {
              _context3.next = 7;
              break;
            }
            if (!((_soundRef$current5 = soundRef.current) != null && _soundRef$current5.replayAsync)) {
              _context3.next = 5;
              break;
            }
            _context3.next = 5;
            return soundRef.current.replayAsync({
              positionMillis: 0,
              shouldPlay: false
            });
          case 5:
            _context3.next = 10;
            break;
          case 7:
            if (!((_soundRef$current6 = soundRef.current) != null && _soundRef$current6.setPositionAsync)) {
              _context3.next = 10;
              break;
            }
            _context3.next = 10;
            return soundRef.current.setPositionAsync(currentTime * 1000);
          case 10:
            _context3.next = 13;
            break;
          case 12:
            if ((_soundRef$current7 = soundRef.current) != null && _soundRef$current7.seek) {
              soundRef.current.seek(currentTime);
            }
          case 13:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function seekAudio(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var changeAudioSpeed = function () {
    var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(speed) {
      var _soundRef$current8;
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (isExpoCLI) {
              _context4.next = 2;
              break;
            }
            return _context4.abrupt("return");
          case 2:
            if (!((_soundRef$current8 = soundRef.current) != null && _soundRef$current8.setRateAsync)) {
              _context4.next = 5;
              break;
            }
            _context4.next = 5;
            return soundRef.current.setRateAsync(speed);
          case 5:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return function changeAudioSpeed(_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  return {
    changeAudioSpeed: changeAudioSpeed,
    pauseAudio: pauseAudio,
    playAudio: playAudio,
    seekAudio: seekAudio
  };
};
//# sourceMappingURL=useAudioPlayer.js.map