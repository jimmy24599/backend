var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectReadsForChannels = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _schema = require("../../schema");
var _SqliteClient = require("../../SqliteClient");
var selectReadsForChannels = exports.selectReadsForChannels = function () {
  var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(cids) {
    var questionMarks, readsColumnNames, userColumnNames, result;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          questionMarks = Array(cids.length).fill('?').join(',');
          readsColumnNames = Object.keys(_schema.tables.reads.columns).map(function (name) {
            return "'".concat(name, "', a.").concat(name);
          }).join(', ');
          userColumnNames = Object.keys(_schema.tables.users.columns).map(function (name) {
            return "'".concat(name, "', b.").concat(name);
          }).join(', ');
          _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'selectReadsForChannels', {
            cids: cids
          });
          _context.next = 6;
          return _SqliteClient.SqliteClient.executeSql("SELECT\n      json_object(\n        'user', json_object(\n          ".concat(userColumnNames, "\n        ),\n        ").concat(readsColumnNames, "\n      ) as value\n    FROM reads a\n    LEFT JOIN\n      users b\n    ON b.id = a.userId\n    WHERE a.cid in (").concat(questionMarks, ")"), cids);
        case 6:
          result = _context.sent;
          return _context.abrupt("return", result.map(function (r) {
            return JSON.parse(r.value);
          }));
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function selectReadsForChannels(_x) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=selectReadsForChannels.js.map