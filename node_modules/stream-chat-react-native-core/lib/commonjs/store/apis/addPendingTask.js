var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPendingTask = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mapTaskToStorable = require("../mappers/mapTaskToStorable");
var _createDeleteQuery = require("../sqlite-utils/createDeleteQuery");
var _createUpsertQuery = require("../sqlite-utils/createUpsertQuery");
var _SqliteClient = require("../SqliteClient");
var addPendingTask = exports.addPendingTask = function () {
  var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(task) {
    var storable, channelId, channelType, payload, type, query;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          storable = (0, _mapTaskToStorable.mapTaskToStorable)(task);
          channelId = storable.channelId, channelType = storable.channelType, payload = storable.payload, type = storable.type;
          query = (0, _createUpsertQuery.createUpsertQuery)('pendingTasks', storable);
          _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'addPendingTask', {
            channelId: channelId,
            channelType: channelType,
            id: task.id,
            type: type
          });
          _context2.next = 6;
          return _SqliteClient.SqliteClient.executeSql.apply(null, query);
        case 6:
          return _context2.abrupt("return", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
            var query;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'deletePendingTaskAfterAddition', {
                    channelId: channelId,
                    channelType: channelType,
                    id: task.id,
                    type: type
                  });
                  query = (0, _createDeleteQuery.createDeleteQuery)('pendingTasks', {
                    channelId: channelId,
                    channelType: channelType,
                    payload: payload,
                    type: type
                  });
                  _context.next = 4;
                  return _SqliteClient.SqliteClient.executeSql.apply(null, query);
                case 4:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function addPendingTask(_x) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=addPendingTask.js.map