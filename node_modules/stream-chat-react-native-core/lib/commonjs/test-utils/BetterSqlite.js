var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BetterSqlite = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _betterSqlite = _interopRequireDefault(require("better-sqlite3"));
var _schema = require("../store/schema");
var _BetterSqlite;
var BetterSqlite = exports.BetterSqlite = (0, _createClass2["default"])(function BetterSqlite() {
  (0, _classCallCheck2["default"])(this, BetterSqlite);
  this.db = null;
});
_BetterSqlite = BetterSqlite;
BetterSqlite.openDB = function () {
  _BetterSqlite.db = new _betterSqlite["default"]('foobar.db');
};
BetterSqlite.closeDB = function () {
  _BetterSqlite.db.close();
};
BetterSqlite.getTables = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
  var tablesInDb;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.next = 2;
        return _BetterSqlite.db.pragma('table_list;');
      case 2:
        tablesInDb = _context.sent;
        return _context.abrupt("return", tablesInDb);
      case 4:
      case "end":
        return _context.stop();
    }
  }, _callee);
}));
BetterSqlite.dropAllTables = function () {
  var tableNames = Object.keys(_schema.tables);
  tableNames.forEach(function (name) {
    var stmt = _BetterSqlite.db.prepare("DROP TABLE IF EXISTS ".concat(name));
    stmt.run();
  });
};
BetterSqlite.selectFromTable = function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(table) {
    var stmt, result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _BetterSqlite.db.prepare("SELECT * FROM ".concat(table));
        case 2:
          stmt = _context2.sent;
          result = stmt.all();
          return _context2.abrupt("return", result);
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=BetterSqlite.js.map