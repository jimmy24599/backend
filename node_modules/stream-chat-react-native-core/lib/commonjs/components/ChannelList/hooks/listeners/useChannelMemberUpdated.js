var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChannelMemberUpdated = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _ChatContext = require("../../../../contexts/chatContext/ChatContext");
var _utils = require("../utils");
var useChannelMemberUpdated = exports.useChannelMemberUpdated = function useChannelMemberUpdated(_ref) {
  var lockChannelOrder = _ref.lockChannelOrder,
    onChannelMemberUpdated = _ref.onChannelMemberUpdated,
    options = _ref.options,
    setChannels = _ref.setChannels;
  var _useChatContext = (0, _ChatContext.useChatContext)(),
    client = _useChatContext.client;
  (0, _react.useEffect)(function () {
    var handleEvent = function handleEvent(event) {
      if (typeof onChannelMemberUpdated === 'function') {
        onChannelMemberUpdated(lockChannelOrder, setChannels, event, options);
      } else {
        var _event$member;
        if (!options) {
          return;
        }
        var filters = options.filters,
          sort = options.sort;
        if (!((_event$member = event.member) != null && _event$member.user) || event.member.user.id !== client.userID || !event.channel_type) {
          return;
        }
        var channelType = event.channel_type;
        var channelId = event.channel_id;
        var considerPinnedChannels = (0, _utils.shouldConsiderPinnedChannels)(sort);
        var considerArchivedChannels = (0, _utils.shouldConsiderArchivedChannels)(filters);
        var pinnedAtSort = (0, _utils.findPinnedAtSortOrder)({
          sort: sort
        });
        setChannels(function (currentChannels) {
          if (!currentChannels) {
            return currentChannels;
          }
          var targetChannel = client.channel(channelType, channelId);
          var targetChannelIndex = currentChannels.indexOf(targetChannel);
          var targetChannelExistsWithinList = targetChannelIndex >= 0;
          var isTargetChannelPinned = (0, _utils.isChannelPinned)(targetChannel);
          var isTargetChannelArchived = (0, _utils.isChannelArchived)(targetChannel);
          if (!considerPinnedChannels || lockChannelOrder) {
            return currentChannels;
          }
          var newChannels = (0, _toConsumableArray2["default"])(currentChannels);
          if (targetChannelExistsWithinList) {
            newChannels.splice(targetChannelIndex, 1);
          }
          if (considerArchivedChannels && !isTargetChannelArchived && filters != null && filters.archived || considerArchivedChannels && isTargetChannelArchived && !(filters != null && filters.archived)) {
            return newChannels;
          }
          var lastPinnedChannelIndex = null;
          if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {
            lastPinnedChannelIndex = (0, _utils.findLastPinnedChannelIndex)({
              channels: newChannels
            });
          }
          var newTargetChannelIndex = typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0;
          if (currentChannels[newTargetChannelIndex] === targetChannel) {
            return currentChannels;
          }
          newChannels.splice(newTargetChannelIndex, 0, targetChannel);
          return newChannels;
        });
      }
    };
    var listener = client == null ? void 0 : client.on('member.updated', handleEvent);
    return function () {
      return listener == null ? void 0 : listener.unsubscribe();
    };
  }, []);
};
//# sourceMappingURL=useChannelMemberUpdated.js.map