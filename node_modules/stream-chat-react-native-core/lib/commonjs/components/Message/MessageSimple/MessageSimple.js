var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageSimple = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _MessageContext = require("../../../contexts/messageContext/MessageContext");
var _MessagesContext = require("../../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _native = require("../../../native");
var _useMessageData2 = require("../hooks/useMessageData");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Message/MessageSimple/MessageSimple.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'flex-end',
    flexDirection: 'row'
  },
  contentContainer: {},
  contentWrapper: {
    alignItems: 'center',
    flexDirection: 'row'
  },
  lastMessageContainer: {
    marginBottom: 12
  },
  leftAlignItems: {
    alignItems: 'flex-start'
  },
  messageGroupedSingleOrBottomContainer: {
    marginBottom: 8
  },
  messageGroupedTopContainer: {},
  rightAlignItems: {
    alignItems: 'flex-end'
  },
  swipeContentContainer: {
    position: 'absolute'
  }
});
var MessageSimpleWithContext = function MessageSimpleWithContext(props) {
  var _groupStyles$;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    messageContentWidth = _useState2[0],
    setMessageContentWidth = _useState2[1];
  var _Dimensions$get = _reactNative.Dimensions.get('screen'),
    width = _Dimensions$get.width;
  var alignment = props.alignment,
    clearQuotedMessageState = props.clearQuotedMessageState,
    enableMessageGroupingByUser = props.enableMessageGroupingByUser,
    enableSwipeToReply = props.enableSwipeToReply,
    groupStyles = props.groupStyles,
    hasReactions = props.hasReactions,
    isMyMessage = props.isMyMessage,
    lastGroupMessage = props.lastGroupMessage,
    members = props.members,
    message = props.message,
    MessageAvatar = props.MessageAvatar,
    MessageContent = props.MessageContent,
    MessageDeleted = props.MessageDeleted,
    MessageFooter = props.MessageFooter,
    MessageHeader = props.MessageHeader,
    MessagePinnedHeader = props.MessagePinnedHeader,
    MessageReplies = props.MessageReplies,
    MessageStatus = props.MessageStatus,
    MessageSwipeContent = props.MessageSwipeContent,
    _props$messageSwipeTo = props.messageSwipeToReplyHitSlop,
    messageSwipeToReplyHitSlop = _props$messageSwipeTo === void 0 ? {
      left: width,
      right: width
    } : _props$messageSwipeTo,
    onlyEmojis = props.onlyEmojis,
    otherAttachments = props.otherAttachments,
    ReactionListBottom = props.ReactionListBottom,
    reactionListPosition = props.reactionListPosition,
    ReactionListTop = props.ReactionListTop,
    setQuotedMessageState = props.setQuotedMessageState,
    showMessageStatus = props.showMessageStatus;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    blue_alice = _useTheme$theme$color.blue_alice,
    grey_gainsboro = _useTheme$theme$color.grey_gainsboro,
    light_blue = _useTheme$theme$color.light_blue,
    light_gray = _useTheme$theme$color.light_gray,
    transparent = _useTheme$theme$color.transparent,
    _useTheme$theme$messa = _useTheme$theme.messageSimple,
    container = _useTheme$theme$messa.container,
    _useTheme$theme$messa2 = _useTheme$theme$messa.content,
    contentContainer = _useTheme$theme$messa2.container,
    errorContainer = _useTheme$theme$messa2.errorContainer,
    receiverMessageBackgroundColor = _useTheme$theme$messa2.receiverMessageBackgroundColor,
    senderMessageBackgroundColor = _useTheme$theme$messa2.senderMessageBackgroundColor,
    contentWrapper = _useTheme$theme$messa.contentWrapper,
    headerWrapper = _useTheme$theme$messa.headerWrapper,
    lastMessageContainer = _useTheme$theme$messa.lastMessageContainer,
    messageGroupedSingleOrBottomContainer = _useTheme$theme$messa.messageGroupedSingleOrBottomContainer,
    messageGroupedTopContainer = _useTheme$theme$messa.messageGroupedTopContainer,
    reactionPosition = _useTheme$theme$messa.reactionListTop.position,
    swipeContentContainer = _useTheme$theme$messa.swipeContentContainer;
  var _useMessageData = (0, _useMessageData2.useMessageData)({}),
    isMessageErrorType = _useMessageData.isMessageErrorType,
    isMessageReceivedOrErrorType = _useMessageData.isMessageReceivedOrErrorType,
    isMessageTypeDeleted = _useMessageData.isMessageTypeDeleted,
    isVeryLastMessage = _useMessageData.isVeryLastMessage,
    messageGroupedSingleOrBottom = _useMessageData.messageGroupedSingleOrBottom;
  var lastMessageInMessageListStyles = [styles.lastMessageContainer, lastMessageContainer];
  var messageGroupedSingleOrBottomStyles = Object.assign({}, styles.messageGroupedSingleOrBottomContainer, messageGroupedSingleOrBottomContainer);
  var messageGroupedTopStyles = Object.assign({}, styles.messageGroupedTopContainer, messageGroupedTopContainer);
  var onLayout = function onLayout(_ref) {
    var width = _ref.nativeEvent.layout.width;
    setMessageContentWidth(width);
  };
  var groupStyle = "".concat(alignment, "_").concat(groupStyles == null || (_groupStyles$ = groupStyles[0]) == null || _groupStyles$.toLowerCase == null ? void 0 : _groupStyles$.toLowerCase());
  var noBorder = onlyEmojis && !message.quoted_message;
  if (otherAttachments.length) {
    if (otherAttachments[0].type === 'giphy' && !isMyMessage) {
      noBorder = false;
    } else {
      noBorder = true;
    }
  }
  var backgroundColor = senderMessageBackgroundColor != null ? senderMessageBackgroundColor : light_blue;
  if (onlyEmojis && !message.quoted_message) {
    backgroundColor = transparent;
  } else if (otherAttachments.length) {
    if (otherAttachments[0].type === 'giphy') {
      backgroundColor = message.quoted_message ? grey_gainsboro : transparent;
    } else {
      backgroundColor = blue_alice;
    }
  } else if (isMessageReceivedOrErrorType) {
    backgroundColor = receiverMessageBackgroundColor != null ? receiverMessageBackgroundColor : light_gray;
  }
  var repliesCurveColor = isMessageReceivedOrErrorType ? grey_gainsboro : backgroundColor;
  var translateX = (0, _reactNativeReanimated.useSharedValue)(0);
  var touchStart = (0, _reactNativeReanimated.useSharedValue)(null);
  var onSwipeToReply = function onSwipeToReply() {
    clearQuotedMessageState();
    setQuotedMessageState(message);
  };
  var THRESHOLD = 25;
  var triggerHaptic = _native.NativeHandlers.triggerHaptic;
  var swipeGesture = _reactNativeGestureHandler.Gesture.Pan().hitSlop(messageSwipeToReplyHitSlop).onBegin(function (event) {
    touchStart.value = {
      x: event.x,
      y: event.y
    };
  }).onTouchesMove(function (event, state) {
    if (!touchStart.value || !event.changedTouches.length) {
      state.fail();
      return;
    }
    var xDiff = Math.abs(event.changedTouches[0].x - touchStart.value.x);
    var yDiff = Math.abs(event.changedTouches[0].y - touchStart.value.y);
    var isHorizontalPanning = xDiff > yDiff;
    if (isHorizontalPanning) {
      state.activate();
    } else {
      state.fail();
    }
  }).onStart(function () {
    translateX.value = 0;
  }).onChange(function (_ref2) {
    var translationX = _ref2.translationX;
    if (translationX > 0) {
      translateX.value = translationX;
    }
  }).onEnd(function () {
    if (translateX.value >= THRESHOLD) {
      (0, _reactNativeReanimated.runOnJS)(onSwipeToReply)();
      if (triggerHaptic) {
        (0, _reactNativeReanimated.runOnJS)(triggerHaptic)('impactMedium');
      }
    }
    translateX.value = (0, _reactNativeReanimated.withSpring)(0, {
      dampingRatio: 1,
      duration: 500,
      overshootClamping: true,
      stiffness: 1
    });
  });
  var messageBubbleAnimatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        translateX: translateX.value
      }]
    };
  });
  var swipeContentAnimatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      opacity: (0, _reactNativeReanimated.interpolate)(translateX.value, [0, THRESHOLD], [0, 1]),
      transform: [{
        translateX: (0, _reactNativeReanimated.interpolate)(translateX.value, [0, THRESHOLD], [-THRESHOLD, 0], _reactNativeReanimated.Extrapolation.CLAMP)
      }]
    };
  });
  var renderMessageBubble = (0, _react.useMemo)(function () {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.contentWrapper, contentWrapper],
      children: [(0, _jsxRuntime.jsx)(MessageContent, {
        backgroundColor: backgroundColor,
        isVeryLastMessage: isVeryLastMessage,
        messageGroupedSingleOrBottom: messageGroupedSingleOrBottom,
        noBorder: noBorder,
        setMessageContentWidth: setMessageContentWidth
      }), reactionListPosition === 'top' && ReactionListTop ? (0, _jsxRuntime.jsx)(ReactionListTop, {
        messageContentWidth: messageContentWidth
      }) : null]
    });
  }, [messageContentWidth, reactionListPosition, MessageContent, ReactionListTop, backgroundColor, contentWrapper, isVeryLastMessage, messageGroupedSingleOrBottom, noBorder]);
  var renderAnimatedMessageBubble = (0, _react.useMemo)(function () {
    return (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
      gesture: swipeGesture,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        hitSlop: messageSwipeToReplyHitSlop,
        style: [styles.contentWrapper, contentWrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated["default"].View, {
          style: [styles.swipeContentContainer, swipeContentAnimatedStyle, swipeContentContainer],
          children: MessageSwipeContent ? (0, _jsxRuntime.jsx)(MessageSwipeContent, {}) : null
        }), (0, _jsxRuntime.jsx)(_reactNativeReanimated["default"].View, {
          style: messageBubbleAnimatedStyle,
          children: renderMessageBubble
        })]
      })
    });
  }, [MessageSwipeContent, contentWrapper, messageBubbleAnimatedStyle, messageSwipeToReplyHitSlop, renderMessageBubble, swipeContentAnimatedStyle, swipeContentContainer, swipeGesture]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, messageGroupedSingleOrBottom ? isVeryLastMessage && enableMessageGroupingByUser ? lastMessageInMessageListStyles : messageGroupedSingleOrBottomStyles : messageGroupedTopStyles, {
      justifyContent: alignment === 'left' ? 'flex-start' : 'flex-end'
    }, container],
    testID: "message-simple-wrapper",
    children: [alignment === 'left' ? (0, _jsxRuntime.jsx)(MessageAvatar, {}) : null, isMessageTypeDeleted ? (0, _jsxRuntime.jsx)(MessageDeleted, {
      date: message.created_at,
      groupStyle: groupStyle,
      noBorder: noBorder,
      onLayout: onLayout
    }) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.contentContainer, isMyMessage ? styles.rightAlignItems : styles.leftAlignItems, isMessageErrorType ? errorContainer : {}, contentContainer],
      testID: "message-components",
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [{
          paddingBottom: hasReactions && reactionListPosition === 'top' ? reactionPosition : 2
        }, headerWrapper],
        children: [MessageHeader && (0, _jsxRuntime.jsx)(MessageHeader, {
          alignment: alignment,
          date: message.created_at,
          isDeleted: isMessageTypeDeleted,
          lastGroupMessage: lastGroupMessage,
          members: members,
          message: message,
          MessageStatus: MessageStatus,
          otherAttachments: otherAttachments,
          showMessageStatus: showMessageStatus
        }), message.pinned ? (0, _jsxRuntime.jsx)(MessagePinnedHeader, {}) : null]
      }), enableSwipeToReply ? renderAnimatedMessageBubble : renderMessageBubble, reactionListPosition === 'bottom' && ReactionListBottom ? (0, _jsxRuntime.jsx)(ReactionListBottom, {}) : null, (0, _jsxRuntime.jsx)(MessageReplies, {
        noBorder: noBorder,
        repliesCurveColor: repliesCurveColor
      }), (0, _jsxRuntime.jsx)(MessageFooter, {
        date: message.created_at,
        isDeleted: !!isMessageTypeDeleted
      })]
    })]
  });
};
var areEqual = function areEqual(prevProps, nextProps) {
  var _prevMessage$quoted_m, _nextMessage$quoted_m, _prevMessage$quoted_m2, _nextMessage$quoted_m2, _prevOtherAttachments, _nextOtherAttachments;
  var prevChannel = prevProps.channel,
    prevGroupStyles = prevProps.groupStyles,
    prevHasReactions = prevProps.hasReactions,
    prevLastGroupMessage = prevProps.lastGroupMessage,
    prevMembers = prevProps.members,
    prevMessage = prevProps.message,
    prevMyMessageTheme = prevProps.myMessageTheme,
    prevOnlyEmojis = prevProps.onlyEmojis,
    prevOtherAttachments = prevProps.otherAttachments;
  var nextChannel = nextProps.channel,
    nextGroupStyles = nextProps.groupStyles,
    nextHasReactions = nextProps.hasReactions,
    nextLastGroupMessage = nextProps.lastGroupMessage,
    nextMembers = nextProps.members,
    nextMessage = nextProps.message,
    nextMyMessageTheme = nextProps.myMessageTheme,
    nextOnlyEmojis = nextProps.onlyEmojis,
    nextOtherAttachments = nextProps.otherAttachments;
  var repliesEqual = prevMessage.reply_count === nextMessage.reply_count;
  if (!repliesEqual) {
    return false;
  }
  var hasReactionsEqual = prevHasReactions === nextHasReactions;
  if (!hasReactionsEqual) {
    return false;
  }
  var groupStylesEqual = JSON.stringify(prevGroupStyles) === JSON.stringify(nextGroupStyles);
  if (!groupStylesEqual) {
    return false;
  }
  var isPrevMessageTypeDeleted = prevMessage.type === 'deleted';
  var isNextMessageTypeDeleted = nextMessage.type === 'deleted';
  var lastGroupMessageEqual = prevLastGroupMessage === nextLastGroupMessage;
  if (!lastGroupMessageEqual) {
    return false;
  }
  var membersEqual = Object.keys(prevMembers).length === Object.keys(nextMembers).length;
  if (!membersEqual) {
    return false;
  }
  var messageEqual = isPrevMessageTypeDeleted === isNextMessageTypeDeleted && prevMessage.reply_count === nextMessage.reply_count && prevMessage.status === nextMessage.status && prevMessage.type === nextMessage.type && prevMessage.text === nextMessage.text && prevMessage.i18n === nextMessage.i18n && prevMessage.pinned === nextMessage.pinned;
  if (!messageEqual) {
    return false;
  }
  var isPrevQuotedMessageTypeDeleted = ((_prevMessage$quoted_m = prevMessage.quoted_message) == null ? void 0 : _prevMessage$quoted_m.type) === 'deleted';
  var isNextQuotedMessageTypeDeleted = ((_nextMessage$quoted_m = nextMessage.quoted_message) == null ? void 0 : _nextMessage$quoted_m.type) === 'deleted';
  var quotedMessageEqual = ((_prevMessage$quoted_m2 = prevMessage.quoted_message) == null ? void 0 : _prevMessage$quoted_m2.id) === ((_nextMessage$quoted_m2 = nextMessage.quoted_message) == null ? void 0 : _nextMessage$quoted_m2.id) && isPrevQuotedMessageTypeDeleted === isNextQuotedMessageTypeDeleted;
  if (!quotedMessageEqual) {
    return false;
  }
  var channelEqual = (prevChannel == null ? void 0 : prevChannel.state.messages.length) === (nextChannel == null ? void 0 : nextChannel.state.messages.length);
  if (!channelEqual) {
    return false;
  }
  var prevMessageAttachments = prevMessage.attachments;
  var nextMessageAttachments = nextMessage.attachments;
  var attachmentsEqual = Array.isArray(prevMessageAttachments) && Array.isArray(nextMessageAttachments) ? prevMessageAttachments.length === nextMessageAttachments.length && prevMessageAttachments.every(function (attachment, index) {
    var attachmentKeysEqual = attachment.image_url === nextMessageAttachments[index].image_url && attachment.og_scrape_url === nextMessageAttachments[index].og_scrape_url && attachment.thumb_url === nextMessageAttachments[index].thumb_url && attachment.type === nextMessageAttachments[index].type;
    return attachmentKeysEqual;
  }) : prevMessageAttachments === nextMessageAttachments;
  if (!attachmentsEqual) {
    return false;
  }
  var latestReactionsEqual = Array.isArray(prevMessage.latest_reactions) && Array.isArray(nextMessage.latest_reactions) ? prevMessage.latest_reactions.length === nextMessage.latest_reactions.length && prevMessage.latest_reactions.every(function (_ref3, index) {
    var _nextMessage$latest_r;
    var type = _ref3.type;
    return type === ((_nextMessage$latest_r = nextMessage.latest_reactions) == null ? void 0 : _nextMessage$latest_r[index].type);
  }) : prevMessage.latest_reactions === nextMessage.latest_reactions;
  if (!latestReactionsEqual) {
    return false;
  }
  var messageThemeEqual = JSON.stringify(prevMyMessageTheme) === JSON.stringify(nextMyMessageTheme);
  if (!messageThemeEqual) {
    return false;
  }
  var onlyEmojisEqual = prevOnlyEmojis === nextOnlyEmojis;
  if (!onlyEmojisEqual) {
    return false;
  }
  var otherAttachmentsEqual = prevOtherAttachments.length === nextOtherAttachments.length && (prevOtherAttachments == null || (_prevOtherAttachments = prevOtherAttachments[0]) == null || (_prevOtherAttachments = _prevOtherAttachments.actions) == null ? void 0 : _prevOtherAttachments.length) === (nextOtherAttachments == null || (_nextOtherAttachments = nextOtherAttachments[0]) == null || (_nextOtherAttachments = _nextOtherAttachments.actions) == null ? void 0 : _nextOtherAttachments.length);
  if (!otherAttachmentsEqual) {
    return false;
  }
  return true;
};
var MemoizedMessageSimple = _react["default"].memo(MessageSimpleWithContext, areEqual);
var MessageSimple = exports.MessageSimple = function MessageSimple(props) {
  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
    alignment = _useMessageContext.alignment,
    channel = _useMessageContext.channel,
    groupStyles = _useMessageContext.groupStyles,
    hasReactions = _useMessageContext.hasReactions,
    isMyMessage = _useMessageContext.isMyMessage,
    lastGroupMessage = _useMessageContext.lastGroupMessage,
    members = _useMessageContext.members,
    message = _useMessageContext.message,
    onlyEmojis = _useMessageContext.onlyEmojis,
    otherAttachments = _useMessageContext.otherAttachments,
    showMessageStatus = _useMessageContext.showMessageStatus;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    clearQuotedMessageState = _useMessagesContext.clearQuotedMessageState,
    enableMessageGroupingByUser = _useMessagesContext.enableMessageGroupingByUser,
    enableSwipeToReply = _useMessagesContext.enableSwipeToReply,
    MessageAvatar = _useMessagesContext.MessageAvatar,
    MessageContent = _useMessagesContext.MessageContent,
    MessageDeleted = _useMessagesContext.MessageDeleted,
    MessageFooter = _useMessagesContext.MessageFooter,
    MessageHeader = _useMessagesContext.MessageHeader,
    MessagePinnedHeader = _useMessagesContext.MessagePinnedHeader,
    MessageReplies = _useMessagesContext.MessageReplies,
    MessageStatus = _useMessagesContext.MessageStatus,
    MessageSwipeContent = _useMessagesContext.MessageSwipeContent,
    messageSwipeToReplyHitSlop = _useMessagesContext.messageSwipeToReplyHitSlop,
    myMessageTheme = _useMessagesContext.myMessageTheme,
    ReactionListBottom = _useMessagesContext.ReactionListBottom,
    reactionListPosition = _useMessagesContext.reactionListPosition,
    ReactionListTop = _useMessagesContext.ReactionListTop,
    setQuotedMessageState = _useMessagesContext.setQuotedMessageState;
  return (0, _jsxRuntime.jsx)(MemoizedMessageSimple, Object.assign({
    alignment: alignment,
    channel: channel,
    clearQuotedMessageState: clearQuotedMessageState,
    enableMessageGroupingByUser: enableMessageGroupingByUser,
    enableSwipeToReply: enableSwipeToReply,
    groupStyles: groupStyles,
    hasReactions: hasReactions,
    isMyMessage: isMyMessage,
    lastGroupMessage: lastGroupMessage,
    members: members,
    message: message,
    MessageAvatar: MessageAvatar,
    MessageContent: MessageContent,
    MessageDeleted: MessageDeleted,
    MessageFooter: MessageFooter,
    MessageHeader: MessageHeader,
    MessagePinnedHeader: MessagePinnedHeader,
    MessageReplies: MessageReplies,
    MessageStatus: MessageStatus,
    MessageSwipeContent: MessageSwipeContent,
    messageSwipeToReplyHitSlop: messageSwipeToReplyHitSlop,
    myMessageTheme: myMessageTheme,
    onlyEmojis: onlyEmojis,
    otherAttachments: otherAttachments,
    ReactionListBottom: ReactionListBottom,
    reactionListPosition: reactionListPosition,
    ReactionListTop: ReactionListTop,
    setQuotedMessageState: setQuotedMessageState,
    showMessageStatus: showMessageStatus
  }, props));
};
MessageSimple.displayName = 'MessageSimple{messageSimple{container}}';
//# sourceMappingURL=MessageSimple.js.map