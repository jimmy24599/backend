var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleEventToSyncDB = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _deleteChannel = require("../../../store/apis/deleteChannel");
var _deleteMember = require("../../../store/apis/deleteMember");
var _deleteMessagesForChannel = require("../../../store/apis/deleteMessagesForChannel");
var _updateMessage = require("../../../store/apis/updateMessage");
var _updatePollMessage = require("../../../store/apis/updatePollMessage");
var _upsertChannelData = require("../../../store/apis/upsertChannelData");
var _upsertChannelDataFromChannel = require("../../../store/apis/upsertChannelDataFromChannel");
var _upsertChannels = require("../../../store/apis/upsertChannels");
var _upsertMembers = require("../../../store/apis/upsertMembers");
var _upsertMessages = require("../../../store/apis/upsertMessages");
var _upsertReads = require("../../../store/apis/upsertReads");
var _createSelectQuery = require("../../../store/sqlite-utils/createSelectQuery");
var _SqliteClient = require("../../../store/SqliteClient");
var handleEventToSyncDB = exports.handleEventToSyncDB = function () {
  var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(event, client, flush) {
    var type, queriesWithChannelGuard, cid, user, _cid, _user, _cid2, message, _user2, _message, _message2, _message3, _event$queriedChannel, _event$queriedChannel2, _event$queriedChannel3, member, _cid3, _member, _cid4, poll, poll_vote, _type;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          type = event.type;
          queriesWithChannelGuard = function () {
            var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(createQueries) {
              var _event$channel;
              var cid, channels, channel, channelQuery, createdQueries, newQueries;
              return _regenerator["default"].wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    cid = event.cid || ((_event$channel = event.channel) == null ? void 0 : _event$channel.cid);
                    if (cid) {
                      _context.next = 5;
                      break;
                    }
                    _context.next = 4;
                    return createQueries(flush);
                  case 4:
                    return _context.abrupt("return", _context.sent);
                  case 5:
                    _context.next = 7;
                    return _SqliteClient.SqliteClient.executeSql.apply(null, (0, _createSelectQuery.createSelectQuery)('channels', ['cid'], {
                      cid: cid
                    }));
                  case 7:
                    channels = _context.sent;
                    if (!(channels.length === 0)) {
                      _context.next = 31;
                      break;
                    }
                    channel = event.channel_type && event.channel_id ? client.channel(event.channel_type, event.channel_id) : undefined;
                    if (!(channel && channel.initialized && !channel.disconnected)) {
                      _context.next = 29;
                      break;
                    }
                    _context.next = 13;
                    return (0, _upsertChannelDataFromChannel.upsertChannelDataFromChannel)({
                      channel: channel,
                      flush: flush
                    });
                  case 13:
                    channelQuery = _context.sent;
                    if (!channelQuery) {
                      _context.next = 25;
                      break;
                    }
                    _context.next = 17;
                    return createQueries(false);
                  case 17:
                    createdQueries = _context.sent;
                    newQueries = [].concat((0, _toConsumableArray2["default"])(channelQuery), (0, _toConsumableArray2["default"])(createdQueries));
                    if (!(flush !== false)) {
                      _context.next = 22;
                      break;
                    }
                    _context.next = 22;
                    return _SqliteClient.SqliteClient.executeSqlBatch(newQueries);
                  case 22:
                    return _context.abrupt("return", newQueries);
                  case 25:
                    console.warn("Couldnt create channel queries on ".concat(type, " event for an initialized channel that is not in DB, skipping event"), {
                      event: event
                    });
                    return _context.abrupt("return", []);
                  case 27:
                    _context.next = 31;
                    break;
                  case 29:
                    console.warn("Received ".concat(type, " event for a non initialized channel that is not in DB, skipping event"), {
                      event: event
                    });
                    return _context.abrupt("return", []);
                  case 31:
                    return _context.abrupt("return", createQueries(flush));
                  case 32:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function queriesWithChannelGuard(_x4) {
              return _ref2.apply(this, arguments);
            };
          }();
          if (!(type === 'message.read' || type === 'notification.mark_read')) {
            _context3.next = 9;
            break;
          }
          cid = event.cid;
          user = event.user;
          if (!(user != null && user.id && cid)) {
            _context3.next = 9;
            break;
          }
          _context3.next = 8;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _upsertReads.upsertReads)({
              cid: cid,
              flush: flushOverride,
              reads: [{
                last_read: event.received_at,
                last_read_message_id: event.last_read_message_id,
                unread_messages: 0,
                user: user
              }]
            });
          });
        case 8:
          return _context3.abrupt("return", _context3.sent);
        case 9:
          if (!(type === 'notification.mark_unread')) {
            _context3.next = 16;
            break;
          }
          _cid = event.cid;
          _user = event.user;
          if (!(_user != null && _user.id && _cid)) {
            _context3.next = 16;
            break;
          }
          _context3.next = 15;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _upsertReads.upsertReads)({
              cid: _cid,
              flush: flushOverride,
              reads: [{
                last_read: event.received_at,
                last_read_message_id: event.last_read_message_id,
                unread_messages: event.unread_messages,
                user: _user
              }]
            });
          });
        case 15:
          return _context3.abrupt("return", _context3.sent);
        case 16:
          if (!(type === 'message.new')) {
            _context3.next = 22;
            break;
          }
          _cid2 = event.cid, message = event.message, _user2 = event.user;
          if (!(message && (!message.parent_id || message.show_in_channel))) {
            _context3.next = 22;
            break;
          }
          _context3.next = 21;
          return queriesWithChannelGuard(function () {
            var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(flushOverride) {
              var queries, userId, channel, ownReads, unreadCount, upsertReadsQueries;
              return _regenerator["default"].wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return (0, _upsertMessages.upsertMessages)({
                      flush: flushOverride,
                      messages: [message]
                    });
                  case 2:
                    queries = _context2.sent;
                    if (!(_cid2 && client.user && client.user.id !== (_user2 == null ? void 0 : _user2.id))) {
                      _context2.next = 13;
                      break;
                    }
                    userId = client.user.id;
                    channel = client.activeChannels[_cid2];
                    if (!channel) {
                      _context2.next = 13;
                      break;
                    }
                    ownReads = channel.state.read[userId];
                    unreadCount = channel.countUnread();
                    _context2.next = 11;
                    return (0, _upsertReads.upsertReads)({
                      cid: _cid2,
                      flush: flushOverride,
                      reads: [{
                        last_read: ownReads.last_read.toString(),
                        last_read_message_id: ownReads.last_read_message_id,
                        unread_messages: unreadCount,
                        user: client.user
                      }]
                    });
                  case 11:
                    upsertReadsQueries = _context2.sent;
                    queries = [].concat((0, _toConsumableArray2["default"])(queries), (0, _toConsumableArray2["default"])(upsertReadsQueries));
                  case 13:
                    return _context2.abrupt("return", queries);
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
            return function (_x5) {
              return _ref3.apply(this, arguments);
            };
          }());
        case 21:
          return _context3.abrupt("return", _context3.sent);
        case 22:
          if (!(type === 'message.updated' || type === 'message.deleted')) {
            _context3.next = 28;
            break;
          }
          _message = event.message;
          if (!(_message && !_message.parent_id)) {
            _context3.next = 28;
            break;
          }
          _context3.next = 27;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _updateMessage.updateMessage)({
              flush: flushOverride,
              message: _message
            });
          });
        case 27:
          return _context3.abrupt("return", _context3.sent);
        case 28:
          if (!(type === 'reaction.updated')) {
            _context3.next = 34;
            break;
          }
          _message2 = event.message;
          if (!(_message2 && event.reaction)) {
            _context3.next = 34;
            break;
          }
          _context3.next = 33;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _updateMessage.updateMessage)({
              flush: flushOverride,
              message: _message2
            });
          });
        case 33:
          return _context3.abrupt("return", _context3.sent);
        case 34:
          if (!(type === 'reaction.new' || type === 'reaction.deleted')) {
            _context3.next = 40;
            break;
          }
          _message3 = event.message;
          if (!(_message3 && !_message3.parent_id)) {
            _context3.next = 40;
            break;
          }
          _context3.next = 39;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _updateMessage.updateMessage)({
              flush: flushOverride,
              message: _message3
            });
          });
        case 39:
          return _context3.abrupt("return", _context3.sent);
        case 40:
          if (!(type === 'channel.updated' || type === 'channel.visible' || type === 'notification.added_to_channel' || type === 'notification.message_new')) {
            _context3.next = 43;
            break;
          }
          if (!event.channel) {
            _context3.next = 43;
            break;
          }
          return _context3.abrupt("return", (0, _upsertChannelData.upsertChannelData)({
            channel: event.channel,
            flush: flush
          }));
        case 43:
          if (!(type === 'channel.hidden' || type === 'channel.deleted' || type === 'notification.removed_from_channel')) {
            _context3.next = 46;
            break;
          }
          if (!event.channel) {
            _context3.next = 46;
            break;
          }
          return _context3.abrupt("return", (0, _deleteChannel.deleteChannel)({
            cid: event.channel.cid,
            flush: flush
          }));
        case 46:
          if (!(type === 'channel.truncated')) {
            _context3.next = 49;
            break;
          }
          if (!event.channel) {
            _context3.next = 49;
            break;
          }
          return _context3.abrupt("return", (0, _deleteMessagesForChannel.deleteMessagesForChannel)({
            cid: event.channel.cid,
            flush: flush
          }));
        case 49:
          if (!(type === 'channels.queried')) {
            _context3.next = 52;
            break;
          }
          if (!((_event$queriedChannel = event.queriedChannels) != null && (_event$queriedChannel = _event$queriedChannel.channels) != null && _event$queriedChannel.length)) {
            _context3.next = 52;
            break;
          }
          return _context3.abrupt("return", (0, _upsertChannels.upsertChannels)({
            channels: (_event$queriedChannel2 = event.queriedChannels) == null ? void 0 : _event$queriedChannel2.channels,
            flush: flush,
            isLatestMessagesSet: (_event$queriedChannel3 = event.queriedChannels) == null ? void 0 : _event$queriedChannel3.isLatestMessageSet
          }));
        case 52:
          if (!(type === 'member.added' || type === 'member.updated')) {
            _context3.next = 59;
            break;
          }
          member = event.member;
          _cid3 = event.cid;
          if (!(member && _cid3)) {
            _context3.next = 59;
            break;
          }
          _context3.next = 58;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _upsertMembers.upsertMembers)({
              cid: _cid3,
              flush: flushOverride,
              members: [member]
            });
          });
        case 58:
          return _context3.abrupt("return", _context3.sent);
        case 59:
          if (!(type === 'member.removed')) {
            _context3.next = 66;
            break;
          }
          _member = event.member;
          _cid4 = event.cid;
          if (!(_member && _cid4)) {
            _context3.next = 66;
            break;
          }
          _context3.next = 65;
          return queriesWithChannelGuard(function (flushOverride) {
            return (0, _deleteMember.deleteMember)({
              cid: _cid4,
              flush: flushOverride,
              member: _member
            });
          });
        case 65:
          return _context3.abrupt("return", _context3.sent);
        case 66:
          if (!['poll.closed', 'poll.updated', 'poll.vote_casted', 'poll.vote_changed', 'poll.vote_removed'].includes(type)) {
            _context3.next = 70;
            break;
          }
          poll = event.poll, poll_vote = event.poll_vote, _type = event.type;
          if (!poll) {
            _context3.next = 70;
            break;
          }
          return _context3.abrupt("return", (0, _updatePollMessage.updatePollMessage)({
            eventType: _type,
            flush: flush,
            poll: poll,
            poll_vote: poll_vote,
            userID: (client == null ? void 0 : client.userID) || ''
          }));
        case 70:
          return _context3.abrupt("return", []);
        case 71:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function handleEventToSyncDB(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=handleEventToSyncDB.js.map