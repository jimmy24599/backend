var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageReactionPicker = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ReactionButton = require("./ReactionButton");
var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");
var _OwnCapabilitiesContext = require("../../contexts/ownCapabilitiesContext/OwnCapabilitiesContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _native = require("../../native");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageMenu/MessageReactionPicker.tsx";
var renderItem = function renderItem(_ref) {
  var index = _ref.index,
    item = _ref.item;
  return (0, _jsxRuntime.jsx)(_ReactionButton.ReactionButton, {
    Icon: item.Icon,
    onPress: item.onSelectReaction,
    selected: item.ownReactionTypes.includes(item.type),
    type: item.type
  }, "".concat(item.type, "_").concat(index));
};
var MessageReactionPicker = exports.MessageReactionPicker = function MessageReactionPicker(props) {
  var _supportedReactions$m;
  var dismissOverlay = props.dismissOverlay,
    handleReaction = props.handleReaction,
    ownReactionTypes = props.ownReactionTypes,
    propSupportedReactions = props.supportedReactions;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    contextSupportedReactions = _useMessagesContext.supportedReactions;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme$messa = _useTheme.theme.messageMenu.reactionPicker,
    container = _useTheme$theme$messa.container,
    contentContainer = _useTheme$theme$messa.contentContainer;
  var own_capabilities = (0, _OwnCapabilitiesContext.useOwnCapabilitiesContext)();
  var supportedReactions = propSupportedReactions || contextSupportedReactions;
  var onSelectReaction = function onSelectReaction(type) {
    _native.NativeHandlers.triggerHaptic('impactLight');
    if (handleReaction) {
      handleReaction(type);
    }
    dismissOverlay();
  };
  if (!own_capabilities.sendReaction) {
    return null;
  }
  var reactions = (_supportedReactions$m = supportedReactions == null ? void 0 : supportedReactions.map(function (reaction) {
    return Object.assign({}, reaction, {
      onSelectReaction: onSelectReaction,
      ownReactionTypes: ownReactionTypes
    });
  })) != null ? _supportedReactions$m : [];
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    accessibilityLabel: "Reaction Selector on long pressing message",
    style: [styles.container, container],
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      contentContainerStyle: [styles.contentContainer, contentContainer],
      data: reactions,
      horizontal: true,
      keyExtractor: function keyExtractor(item) {
        return item.type;
      },
      renderItem: renderItem
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    alignSelf: 'stretch'
  },
  contentContainer: {
    flexGrow: 1,
    justifyContent: 'space-around',
    marginVertical: 8
  }
});
//# sourceMappingURL=MessageReactionPicker.js.map