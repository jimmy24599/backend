var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AttachmentPickerSelectionBar = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _AttachmentPickerContext = require("../../../contexts/attachmentPickerContext/AttachmentPickerContext");
var _ChannelContext = require("../../../contexts/channelContext/ChannelContext");
var _MessageInputContext = require("../../../contexts/messageInputContext/MessageInputContext");
var _MessagesContext = require("../../../contexts/messagesContext/MessagesContext");
var _OwnCapabilitiesContext = require("../../../contexts/ownCapabilitiesContext/OwnCapabilitiesContext");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AttachmentPicker/components/AttachmentPickerSelectionBar.tsx";
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    flexDirection: 'row',
    paddingHorizontal: 6
  },
  icon: {
    marginHorizontal: 12
  }
});
var AttachmentPickerSelectionBar = exports.AttachmentPickerSelectionBar = function AttachmentPickerSelectionBar() {
  var _useAttachmentPickerC = (0, _AttachmentPickerContext.useAttachmentPickerContext)(),
    attachmentSelectionBarHeight = _useAttachmentPickerC.attachmentSelectionBarHeight,
    CameraSelectorIcon = _useAttachmentPickerC.CameraSelectorIcon,
    closePicker = _useAttachmentPickerC.closePicker,
    CreatePollIcon = _useAttachmentPickerC.CreatePollIcon,
    FileSelectorIcon = _useAttachmentPickerC.FileSelectorIcon,
    ImageSelectorIcon = _useAttachmentPickerC.ImageSelectorIcon,
    selectedPicker = _useAttachmentPickerC.selectedPicker,
    setSelectedPicker = _useAttachmentPickerC.setSelectedPicker,
    VideoRecorderSelectorIcon = _useAttachmentPickerC.VideoRecorderSelectorIcon;
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    hasCameraPicker = _useMessageInputConte.hasCameraPicker,
    hasFilePicker = _useMessageInputConte.hasFilePicker,
    hasImagePicker = _useMessageInputConte.hasImagePicker,
    imageUploads = _useMessageInputConte.imageUploads,
    openPollCreationDialog = _useMessageInputConte.openPollCreationDialog,
    pickFile = _useMessageInputConte.pickFile,
    sendMessage = _useMessageInputConte.sendMessage,
    takeAndUploadImage = _useMessageInputConte.takeAndUploadImage;
  var _useChannelContext = (0, _ChannelContext.useChannelContext)(),
    threadList = _useChannelContext.threadList;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    hasCreatePoll = _useMessagesContext.hasCreatePoll;
  var ownCapabilities = (0, _OwnCapabilitiesContext.useOwnCapabilitiesContext)();
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme$attac = _useTheme.theme.attachmentSelectionBar,
    container = _useTheme$theme$attac.container,
    icon = _useTheme$theme$attac.icon;
  var setImagePicker = function setImagePicker() {
    if (selectedPicker === 'images') {
      setSelectedPicker(undefined);
      closePicker();
    } else {
      setSelectedPicker('images');
    }
  };
  var openFilePicker = function openFilePicker() {
    setSelectedPicker(undefined);
    closePicker();
    pickFile();
  };
  var openPollCreationModal = function openPollCreationModal() {
    setSelectedPicker(undefined);
    closePicker();
    openPollCreationDialog == null || openPollCreationDialog({
      sendMessage: sendMessage
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, container, {
      height: attachmentSelectionBarHeight
    }],
    children: [hasImagePicker ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      hitSlop: {
        bottom: 15,
        top: 15
      },
      onPress: setImagePicker,
      testID: "upload-photo-touchable",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.icon, icon],
        children: (0, _jsxRuntime.jsx)(ImageSelectorIcon, {
          numberOfImageUploads: imageUploads.length,
          selectedPicker: selectedPicker
        })
      })
    }) : null, hasFilePicker ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      hitSlop: {
        bottom: 15,
        top: 15
      },
      onPress: openFilePicker,
      testID: "upload-file-touchable",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.icon, icon],
        children: (0, _jsxRuntime.jsx)(FileSelectorIcon, {
          numberOfImageUploads: imageUploads.length,
          selectedPicker: selectedPicker
        })
      })
    }) : null, hasCameraPicker ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      hitSlop: {
        bottom: 15,
        top: 15
      },
      onPress: function onPress() {
        takeAndUploadImage(_reactNative.Platform.OS === 'android' ? 'image' : 'mixed');
      },
      testID: "take-photo-touchable",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.icon, icon],
        children: (0, _jsxRuntime.jsx)(CameraSelectorIcon, {
          numberOfImageUploads: imageUploads.length,
          selectedPicker: selectedPicker
        })
      })
    }) : null, hasCameraPicker && _reactNative.Platform.OS === 'android' ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      hitSlop: {
        bottom: 15,
        top: 15
      },
      onPress: function onPress() {
        takeAndUploadImage('video');
      },
      testID: "take-photo-touchable",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.icon, {
          marginTop: 4
        }, icon],
        children: (0, _jsxRuntime.jsx)(VideoRecorderSelectorIcon, {
          numberOfImageUploads: imageUploads.length,
          selectedPicker: selectedPicker
        })
      })
    }) : null, !threadList && hasCreatePoll && ownCapabilities.sendPoll ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      hitSlop: {
        bottom: 15,
        top: 15
      },
      onPress: openPollCreationModal,
      testID: "create-poll-touchable",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.icon, icon],
        children: (0, _jsxRuntime.jsx)(CreatePollIcon, {})
      })
    }) : null]
  });
};
//# sourceMappingURL=AttachmentPickerSelectionBar.js.map